interface Formulas {
    code: string;
    group: string;
    formula: string;
    fields: string;
    example: string;
    expectedResult: string;
    description: string;
    descriptionOpt?: string;
    returnType: string;
    returnMultiple?: boolean;
    isFavorite?: boolean;
}

export const formulaList: Formulas[] = [
    {
        code: 'STRINGIFY',
        group: 'FORMULA.GROUP.OBJECT',
        formula: 'STRINGIFY({{1}})',
        fields: '1:obj:object',
        example: 'stringify({key: value})',
        expectedResult: '"{"key":value}"',
        description: 'FORMULA.STRINGIFY',
        descriptionOpt: 'FORMULA.STRINGIFY-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'PARSE',
        group: 'FORMULA.GROUP.OBJECT',
        formula: 'PARSE({{1}})',
        fields: '1:str:string',
        example: 'parse("{"key": "value"}")',
        expectedResult: '{"key":value}',
        description: 'FORMULA.PARSE',
        descriptionOpt: 'FORMULA.PARSE-OPT',
        returnType: 'object',
        isFavorite: true,
    },
    {
        code: 'DATE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DATE({{1}}, {{2}}, {{3}})',
        fields: '1:year:number;2:month:number;3:day:number',
        example: 'DATE(2008, 7, 8)',
        expectedResult: 'Tue Jul 08 2008 00:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.DATE',
        descriptionOpt: 'FORMULA.DATE-OPT',
        returnType: 'date',
        isFavorite: true,
    },
    {
        code: 'DATETOSTR',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DATETOSTR({{1}},{{2}})',
        fields: '1:date:datetime;2:format:string',
        example: 'DATETOSTR(10/10/2021 10:01, DD-MM-YYYY hh[h]mm)',
        expectedResult: '10-10-2021 10h01',
        description: 'FORMULA.DATETOSTR',
        descriptionOpt: 'FORMULA.DATETOSTR-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'STRTODATE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'STRTODATE({{1}},{{2}})',
        fields: '1:date:string;2:format:string',
        example: 'STRTODATE(10/10/2021 10h01,"DD-MM-YYYY hh[h]mm")',
        expectedResult: 'Sun Oct 10 2021 10:01:00 GMT+0200',
        description: 'FORMULA.STRTODATE',
        descriptionOpt: 'FORMULA.STRTODATE-OPT',
        returnType: 'datetime',
        isFavorite: true,
    },
    {
        code: 'DATESUBTRACT',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DATESUBTRACT({{1}},{{2}},{{3}})',
        fields: '1:date:datetime;2:value:number;3:type:string',
        example: 'DATESUBTRACT(Mon Jul 09 2008 00:00:00 GMT-0700, 1, day)',
        expectedResult: 'Mon Jul 08 2008 00:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.DATESUBTRACT',
        descriptionOpt: 'FORMULA.DATESUBTRACT-OPT',
        returnType: 'datetime',
        isFavorite: true,
    },
    {
        code: 'DATEADD',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DATEADD({{1}},{{2}},{{3}})',
        fields: '1:date:datetime;2:value:number;3:type:string',
        example: 'DATEADD(Mon Jul 09 2008 10:00:00 GMT-0700, 1, hour)',
        expectedResult: 'Mon Jul 08 2008 11:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.DATEADD',
        descriptionOpt: 'FORMULA.DATEADD-OPT',
        returnType: 'datetime',
        isFavorite: true,
    },
    {
        code: 'DATEVALUE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DATEVALUE({{1}})',
        fields: '1:date:date',
        example: 'DATEVALUE("8/22/2011")',
        expectedResult: 'Mon Aug 22 2011 00:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.DATEVALUE',
        descriptionOpt: 'FORMULA:DATEVALUE-OPT',
        returnType: 'number'
    },
    {
        code: 'DAY',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DAY({{1}})',
        fields: '1:date:date',
        example: 'DAY("15-Apr-11")',
        expectedResult: '15',
        description: 'FORMULA.DAY',
        descriptionOpt: 'FORMULA.DAY-OPT',
        returnType: 'number'
    },
    {
        code: 'DAYS',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DAYS({{1}}, {{2}})',
        fields: '1:end_date:date;2:start_date:date',
        example: 'DAYS("3/15/11", "2/1/11")',
        expectedResult: '42',
        description: 'FORMULA.DAYS',
        descriptionOpt: 'FORMULA.DAYS-OPT',
        returnType: 'number',
        isFavorite: true,
    },
    {
        code: 'DAYS360',
        group: 'FORMULA.GROUP.DATE',
        formula: 'DAYS360({{1}}, {{2}}, {{3}})',
        fields: '1:start_date:date;2:end_date:date;3:method:boolean:*',
        example: 'DAYS360("1-Jan-11", "31-Dec-11")',
        expectedResult: '360',
        description: 'FORMULA.DAYS360',
        descriptionOpt: 'FORMULA.DAYS360-OPT',
        returnType: 'number'
    },
    {
        code: 'EDATE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'EDATE({{1}}, {{2}})',
        fields: '1:start_date:date;2:months:number',
        example: 'EDATE("1/15/11", -1)',
        expectedResult: 'Wed Dec 15 2010 00:00:00 GMT-0800 (PST)',
        description: 'FORMULA.EDATE',
        descriptionOpt: 'FORMULA.EDATE-OPT',
        returnType: 'number'
    },
    {
        code: 'EOMONTH',
        group: 'FORMULA.GROUP.DATE',
        formula: 'EOMONTH({{1}}, {{2}})',
        fields: '1:start_date:date;2:months:number',
        example: 'EOMONTH("1/1/11", -3)',
        expectedResult: 'Sun Oct 31 2010 00:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.EOMONTH',
        descriptionOpt: 'FORMULA-EOMONTH-OPT',
        returnType: 'date'
    },
    {
        code: 'HOUR',
        group: 'FORMULA.GROUP.DATE',
        formula: 'HOUR({{1}})',
        fields: '1:time:datetime',
        example: 'HOUR("7/18/2011 7:45:00 AM")',
        expectedResult: '7',
        description: 'FORMULA.HOUR',
        descriptionOpt: 'FORMULA.HOUR-OPT',
        returnType: 'number'
    },
    {
        code: 'MINUTE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'MINUTE({{1}})',
        fields: '1:time:datetime',
        example: 'MINUTE("2/1/2011 12:45:00 PM")',
        expectedResult: '45',
        description: 'FORMULA.MINUTE',
        descriptionOpt: 'FORMULA.MINUTE-OPT',
        returnType: 'number'
    },
    {
        code: 'ISOWEEKNUM',
        group: 'FORMULA.GROUP.DATE',
        formula: 'ISOWEEKNUM({{1}})',
        fields: '1:date:date',
        example: 'ISOWEEKNUM("3/9/2012")',
        expectedResult: '10',
        description: 'FORMULA.ISOWEEKNUM',
        descriptionOpt: 'FORMULA.ISOWEEKNUM-OPT',
        returnType: 'number'
    },
    {
        code: 'MONTH',
        group: 'FORMULA.GROUP.DATE',
        formula: 'MONTH({{1}})',
        fields: '1:date:date',
        example: 'MONTH("15-Apr-11")',
        expectedResult: '4',
        description: 'FORMULA.MONTH',
        returnType: 'number'
    },
    {
        code: 'NETWORKDAYS',
        group: 'FORMULA.GROUP.DATE',
        formula: 'NETWORKDAYS({{1}}, {{2}}, {{3}})',
        fields: '1:start-date:date;2:end_date:date;3:holidays:date:*:[]',
        example: 'NETWORKDAYS("10/1/2012", "3/1/2013", ["11/22/2012"])',
        expectedResult: '109',
        description: 'FORMULA.NETWORKDAYS',
        descriptionOpt: 'FORMULA.NETWORKDAYS-OPT',
        returnType: 'number'
    },
    {
        code: 'NETWORKDAYSINTL',
        group: 'FORMULA.GROUP.DATE',
        formula: 'NETWORKDAYSINTL({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:start-date:date;2:end_date:date;3:weekend:number:*;4:holidays:date:*:[]',
        example: 'NETWORKDAYSINTL("1/1/2006", "2/1/2006", 7, ["1/2/2006"])',
        expectedResult: '23',
        description: 'FORMULA.NETWORKDAYSINTL',
        descriptionOpt: 'FORMULA.NETWORKDAYSINTL-OPT',
        returnType: 'number'
    },
    {
        code: 'NOW',
        group: 'FORMULA.GROUP.DATE',
        formula: 'NOW()',
        fields: '',
        example: 'NOW()',
        expectedResult: 'Thu Feb 20 2020 23:02:55 GMT+0100 (Central European Standard Time)',
        description: 'FORMULA.NOW',
        descriptionOpt: '',
        returnType: 'datetime',
        isFavorite: true,
    },
    {
        code: 'SECOND',
        group: 'FORMULA.GROUP.DATE',
        formula: 'SECOND({{1}})',
        fields: '1:date:datetime',
        example: 'SECOND("2/1/2011 4:48:18 PM")',
        expectedResult: '18',
        description: 'FORMULA.SECOND',
        descriptionOpt: 'FORMULA.SECOND-OPT',
        returnType: 'number'
    },
    {
        code: 'TIME',
        group: 'FORMULA.GROUP.DATE',
        formula: 'TIME({{1}}, {{2}}, {{3}})',
        fields: '1:hour:number;2:minute:number;3:second:number',
        example: 'TIME(16, 48, 10)',
        expectedResult: '0.7001157407407408',
        description: 'FORMULA.TIME',
        descriptionOpt: 'FORMULA.TIME-OPT',
        returnType: 'number',
        isFavorite: true,
    },
    {
        code: 'TIMEVALUE',
        group: 'FORMULA.GROUP.DATE',
        formula: 'TIMEVALUE({{1}})',
        fields: '1:time:time',
        example: 'TIMEVALUE("22-Aug-2011 6:35 AM")',
        expectedResult: '0.2743055555555556',
        description: 'FORMULA.TIMEVALUE',
        descriptionOpt: 'FORMULA.TIMEVALUE-OPT',
        returnType: 'number'
    },
    {
        code: 'TODAY',
        group: 'FORMULA.GROUP.DATE',
        formula: 'TODAY()',
        fields: '',
        example: 'TODAY()',
        expectedResult: 'Thu Feb 20 2020 23:02:55 GMT+0100 (Central European Standard Time)',
        description: 'FORMULA.TODAY',
        descriptionOpt: 'FORMULA.TODAY-OPT',
        returnType: 'datetime',
        isFavorite: true,
    },
    {
        code: 'WEEKDAY',
        group: 'FORMULA.GROUP.DATE',
        formula: 'WEEKDAY({{1}}, {{2}})',
        fields: '1:date:date;2:return_type:number:*',
        example: 'WEEKDAY("2/14/2008", 7)',
        expectedResult: '3',
        description: 'FORMULA.WEEKDAY',
        descriptionOpt: 'FORMULA.WEEKDAY-OPT',
        returnType: 'number'
    },
    {
        code: 'YEAR',
        group: 'FORMULA.GROUP.DATE',
        formula: 'YEAR({{1}})',
        fields: '1:date:date',
        example: 'YEAR("7/5/2008")',
        expectedResult: '2008',
        description: 'FORMULA.YEAR',
        descriptionOpt: 'FORMULA.YEAR-OPT',
        returnType: 'number'
    },
    {
        code: 'WEEKNUM',
        group: 'FORMULA.GROUP.DATE',
        formula: 'WEEKNUM({{1}}, {{2}})',
        fields: '1:date:date;2:return_type:number:*',
        example: 'WEEKNUM("3/9/2012", 2)',
        expectedResult: '11',
        description: 'FORMULA.WEEKNUM',
        descriptionOpt: 'FORMULA.WEEKNUM-OPT',
        returnType: 'number'
    },
    {
        code: 'WORKDAY',
        group: 'FORMULA.GROUP.DATE',
        formula: 'WORKDAY({{1}}, {{2}}, {{3}})',
        fields: '1:start_date:date;2:days:number;3:holidays:date:*:[]',
        example: 'WORKDAY("10/1/2008", 51, ["1/26/2008", "12/4/2008"])',
        expectedResult: 'Mon May 04 2009 00:00:00 GMT-0700 (PDT)',
        description: 'FORMULA.WORKDAY',
        descriptionOpt: 'FORMULA.WORKDAY-OPT',
        returnType: 'date'
    },
    {
        code: 'WORKDAYINTL',
        group: 'FORMULA.GROUP.DATE',
        formula: 'WORKDAYINTL({{1}}, {{2}}, {{3}})',
        fields: '1:start_date:date;2:days:number;3:weekend:number:*;4:holidays:date:*:[]',
        example: 'WORKDAYINTL("1/1/2012", 0, 17)',
        expectedResult: 'Sun Feb 05 2012 00:00:00 GMT-0800 (PST)',
        description: 'FORMULA.WORKDAYINTL',
        descriptionOpt: 'FORMULA.WORKDAYINTL-OPT',
        returnType: 'date'
    },
    {
        code: 'YEARFRAC',
        group: 'FORMULA.GROUP.DATE',
        formula: 'YEARFRAC({{1}}, {{2}}, {{3}})',
        fields: '1:start_date:date;2:end_date:date;3:basis:number:*',
        example: 'YEARFRAC("1/1/2012", "7/30/2012", 3)',
        expectedResult: '0.5780821917808219',
        description: 'FORMULA.YEARFRAC',
        descriptionOpt: 'FORMULA.YEARFRAC-OPT',
        returnType: 'number'
    },
    {
        code: 'CHAR',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'CHAR({{1}})',
        fields: '1:code:number',
        example: 'CHAR(65)',
        expectedResult: 'A',
        description: 'FORMULA.CHAR',
        descriptionOpt: 'FORMULA.CHAR-OPT',
        returnType: 'string'
    },
    {
        code: 'CLEAN',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'CLEAN({{1}})',
        fields: '1:text:string',
        example: 'CLEAN("Monthly report")',
        expectedResult: 'Monthly report',
        description: 'FORMULA.CLEAN',
        descriptionOpt: 'FORMULA.CLEAN-OPT',
        returnType: 'string'
    },
    {
        code: 'CODE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'CODE({{1}})',
        fields: '1:text:string',
        example: 'CODE("A")',
        expectedResult: '65',
        description: 'FORMULA.CODE',
        descriptionOpt: 'FORMULA.CODE-OPT',
        returnType: 'number'
    },
    {
        code: 'CONCATENATE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'CONCATENATE({{1}}, {{2}}, {{3}})',
        fields: '1:text1:string;2:text2:string;3:text3:string:*',
        example: 'CONCATENATE("Andreas", " ", "Hauser")',
        expectedResult: 'Andreas Hauser',
        description: 'FORMULA.CONCATENATE',
        descriptionOpt: 'FORMULA.CONCATENATE-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'EXACT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'EXACT({{1}}, {{2}})',
        fields: '1:text1:string;2:text2:string',
        example: 'EXACT("Word", "word")',
        expectedResult: 'false',
        description: 'FORMULA.EXACT',
        descriptionOpt: 'FORMULA.EXACT-OPT',
        returnType: 'boolean'
    },
    {
        code: 'FIND',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'FIND({{1}}, {{2}}, {{3}})',
        fields: '1:find_text:string;2:within_text:string;3:start_number:number:*',
        example: 'FIND("M", "Miriam McGovern", 2)',
        expectedResult: '8',
        description: 'FORMULA.FIND',
        descriptionOpt: 'FORMULA.FIND-OPT',
        returnType: 'number'
    },
    {
        code: 'LEFT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'LEFT({{1}}, {{2}})',
        fields: '1:text:string;2:num_chars:number:*',
        example: 'LEFT("Sale Price", 4)',
        expectedResult: 'Sale',
        description: 'FORMULA.LEFT',
        descriptionOpt: 'FORMULA.LEFT-OPT',
        returnType: 'string'
    },
    {
        code: 'LEN',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'LEN({{1}})',
        fields: '1:text:string',
        example: 'LEN("Phoenix, AZ")',
        expectedResult: '11',
        description: 'FORMULA.LEN',
        descriptionOpt: 'FORMULA.LEN-OPT',
        returnType: 'number',
        isFavorite: true,
    },
    {
        code: 'LOWER',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'LOWER({{1}})',
        fields: '1:text:string',
        example: 'LOWER("E. E. Cummings")',
        expectedResult: 'e. e. cummings',
        description: 'FORMULA.LOWER',
        descriptionOpt: 'FORMULA.LOWER-OPT',
        returnType: 'string'
    },
    {
        code: 'MID',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'MID({{1}}, {{2}}, {{3}})',
        fields: '1:text:string;2:start_num:number;3:num_chars:number:*',
        example: 'MID("Fluid Flow", 7, 20)',
        expectedResult: 'Flow',
        description: 'FORMULA.MID',
        descriptionOpt: 'FORMULA.MID-OPT',
        returnType: 'string'
    },
    {
        code: 'NUMBERVALUE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'NUMBERVALUE({{1}})',
        fields: '1:text:string',
        example: 'NUMBERVALUE("+2500.27")',
        expectedResult: '2500.27',
        description: 'FORMULA.NUMBERVALUE',
        descriptionOpt: 'FORMULA.NUMBERVALUE-OPT',
        returnType: 'number'
    },
    {
        code: 'PROPER',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'PROPER({{1}})',
        fields: '1:text:string',
        example: 'PROPER("this is a TITLE")',
        expectedResult: 'This Is A Title',
        description: 'FORMULA.PROPER',
        descriptionOpt: 'FORMULA.PROPER-OPT',
        returnType: 'string'
    },
    {
        code: 'REGEXEXTRACT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'REGEXEXTRACT({{1}}, {{2}})',
        fields: '1:text:string;2:expression:string',
        example: 'REGEXEXTRACT("Palo Alto", "Alto")',
        expectedResult: 'Alto',
        description: 'FORMULA.REGEXEXTRACT',
        descriptionOpt: 'FORMULA.REGEXEXTRACT-OPT',
        returnType: 'string'
    },
    {
        code: 'REGEXMATCH',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'REGEXMATCH({{1}}, {{2}})',
        fields: '1:text:string;2:expression:string',
        example: 'REGEXMATCH("Palo Alto", "Alto")',
        expectedResult: 'true',
        description: 'FORMULA.REGEXMATCH',
        descriptionOpt: 'FORMULA.REGEXMATCH-OPT',
        returnType: 'boolean'
    },
    {
        code: 'REGEXREPLACE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'REGEXREPLACE({{1}}, {{2}}, {{3}})',
        fields: '1:text:string;2:expression:string;3:replace:string',
        example: 'REGEXREPLACE("Sutoiku", "utoiku", "TOIC")',
        expectedResult: 'STOIC',
        description: 'FORMULA.REGEXREPLACE',
        descriptionOpt: 'FORMULA.REGEXREPLACE-OPT',
        returnType: 'string'
    },
    {
        code: 'REPLACE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'REPLACE({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:old_text:string;2:start_num:number;3:num_chars:number;4:new_text:string',
        example: 'REPLACE("abcdefghijk", 6, 5, "*")',
        expectedResult: 'abcde*k',
        description: 'FORMULA.REPLACE',
        descriptionOpt: 'FORMULA.REPLACE-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'REPT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'REPT({{1}}, {{2}})',
        fields: '1:text:string;2:number_times:number',
        example: 'REPT("*-", 3)',
        expectedResult: '*-*-*-',
        description: 'FORMULA.REPT',
        descriptionOpt: 'FORMULA.REPT-OPT',
        returnType: 'string'
    },
    {
        code: 'RIGHT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'RIGHT({{1}}, {{2}})',
        fields: '1:text:string;2:num_chars:number',
        example: 'RIGHT("Sale Price", 5)',
        expectedResult: 'Price',
        description: 'FORMULA.RIGHT',
        descriptionOpt: 'FORMULA.RIGHT-OPT',
        returnType: 'string'
    },
    {
        code: 'ROMAN',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'ROMAN({{1}})',
        fields: '1:text:number',
        example: 'ROMAN(499)',
        expectedResult: 'CDXCIX',
        description: 'FORMULA.ROMAN',
        descriptionOpt: 'FORMULA.ROMAN-OPT',
        returnType: 'string'
    },
    {
        code: 'SEARCH',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'SEARCH({{1}}, {{2}}, {{3}})',
        fields: '1:find_text:string;2:within_text:string;3:start_num:number:*',
        example: 'SEARCH("margin Profit, "margin")',
        expectedResult: '8',
        description: 'FORMULA.SEARCH',
        descriptionOpt: 'FORMULA.SEARCH-OPT',
        returnType: 'string'
    },
    {
        code: 'SPLIT',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'SPLIT({{1}}, {{2}})',
        fields: '1:text:string;2:delimiter:string',
        example: 'SPLIT("A,B,C", ",")',
        expectedResult: '["A", "B", "C"]',
        description: 'FORMULA.SPLIT',
        descriptionOpt: 'FORMULA.SPLIT-OPT',
        returnType: 'string',
        returnMultiple: true
    },
    {
        code: 'SUBSTITUTE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'SUBSTITUTE({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:text:string;2:old_text:string;3:new_text:string;4:instance:number:*',
        example: 'SUBSTITUTE("Quarter 1, 2011", "1", "2", 3)',
        expectedResult: 'Quarter 1, 2012',
        description: 'FORMULA.SUBSTITUTE',
        descriptionOpt: 'FORMULA.SUBSTITUTE-OPT',
        returnType: 'string'
    },
    {
        code: 'T',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'T({{1}})',
        fields: '1:text:string',
        example: 'T("Rainfall")',
        expectedResult: 'Rainfall',
        description: 'FORMULA.T',
        descriptionOpt: 'FORMULA.T-OPT',
        returnType: 'string'
    },
    {
        code: 'TRIM',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'TRIM({{1}})',
        fields: '1:text:string',
        example: 'TRIM(" First Quarter Earnings ")',
        expectedResult: 'First Quarter Earnings',
        description: 'FORMULA.TRIM',
        descriptionOpt: 'FORMULA.TRIM-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'UNICHAR',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'UNICHAR({{1}})',
        fields: '1:code:number',
        example: 'UNICHAR(66)',
        expectedResult: 'B',
        description: 'FORMULA.UNICHAR',
        descriptionOpt: 'FORMULA.UNICHAR-OPT',
        returnType: 'string'
    },
    {
        code: 'UNICODE',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'UNICODE({{1}})',
        fields: '1:code:string',
        example: 'UNICODE("B")',
        expectedResult: '66',
        description: 'FORMULA.UNICODE',
        descriptionOpt: 'FORMULA.UNICODE-OPT',
        returnType: 'number'
    },
    {
        code: 'UPPER',
        group: 'FORMULA.GROUP.TEXT',
        formula: 'UPPER({{1}})',
        fields: '1:text:string',
        example: 'UPPER("total")',
        expectedResult: 'TOTAL',
        description: 'FORMULA.UPPER',
        descriptionOpt: 'FORMULA.UPPER-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'AND',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'AND({{1}}, {{2}})',
        fields: '1:logical1:any;2:logical2:any:*',
        example: 'AND(true, false, true)',
        expectedResult: 'false',
        description: 'FORMULA.AND',
        descriptionOpt: 'FORMULA.AND-OPT',
        returnType: 'boolean'
    },
    {
        code: 'FALSE',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'FALSE()',
        fields: '',
        example: 'FALSE()',
        expectedResult: 'false',
        description: 'FORMULA.FALSE',
        descriptionOpt: 'FORMULA.FALSE-OPT',
        returnType: 'boolean'
    },
    {
        code: 'IF',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'IF({{1}}, {{2}}, {{3}})',
        fields: '1:logical_test:boolean;2:value_if_true:string:*;3:value_if_false:string:*',
        example: 'IF(true, "Hello!", "Goodbye!")',
        expectedResult: 'Hello!',
        description: 'FORMULA.IF',
        descriptionOpt: 'FORMULA.IF-OPT',
        returnType: 'string',
        isFavorite: true,
    },
    {
        code: 'IFERROR',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'IFERROR({{1}}, {{2}})',
        fields: '1:value:string;2:value_if_error:string',
        example: 'IFERROR("#DIV/0!", "Error")',
        expectedResult: 'Error',
        description: 'FORMULA.IFERROR',
        descriptionOpt: 'FORMULA.IFERROR-OPT',
        returnType: 'string'
    },
    {
        code: 'IFNA',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'IFNA({{1}}, {{2}})',
        fields: '1:value:string;2:value_if_na:string',
        example: 'IFNA("#N/A", "Error")',
        expectedResult: 'Error',
        description: 'FORMULA.IFNA',
        descriptionOpt: 'FORMULA.IFNA-OPT',
        returnType: 'string'
    },
    {
        code: 'NOT',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'NOT({{1}})',
        fields: '1:logical:boolean',
        example: 'NOT(true)',
        expectedResult: 'false',
        description: 'FORMULA.NOT',
        descriptionOpt: 'FORMULA.NOT-OPT',
        returnType: 'boolean'
    },
    {
        code: 'OR',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'OR({{1}}, {{2}})',
        fields: '1:logical1:boolean;2:logical2:boolean',
        example: 'OR(true, false, true)',
        expectedResult: 'true',
        description: 'FORMULA.OR',
        descriptionOpt: 'FORMULA.OR-OPT',
        returnType: 'boolean'
    },
    {
        code: 'SWITCH',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'SWITCH({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:expression:any;2:val1_result1:any;3:val2_result2:any:*;4:default:any:*',
        example: 'SWITCH(7, 9, "Nine", 7, "Seven")',
        expectedResult: 'Seven',
        description: 'FORMULA.SWITCH',
        descriptionOpt: 'FORMULA.SWITCH-OPT',
        returnType: 'string'
    },
    {
        code: 'TRUE',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'TRUE()',
        fields: '',
        example: 'TRUE()',
        expectedResult: 'true',
        description: 'FORMULA.TRUE',
        descriptionOpt: 'FORMULA.TRUE-OPT',
        returnType: 'boolean'
    },
    {
        code: 'XOR',
        group: 'FORMULA.GROUP.LOGICAL',
        formula: 'XOR({{1}}, {{2}})',
        fields: '1:logical1:boolean;2:logical2:boolean',
        example: 'XOR(true, false, true)',
        expectedResult: 'false',
        description: 'FORMULA.XOR',
        descriptionOpt: 'FORMULA.XOR-OPT',
        returnType: 'boolean'
    },
    {
        code: 'ACCRINT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'ACCRINT({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}}, {{7}}, {{8}})',
        fields: '1:id:date;2:fd:date;3:sd:date;4:rate:number;5:par:number;6:freq:number;7:basis:number:*;8:calc:boolean:*',
        example: 'ACCRINT("01/01/2011", "02/01/2011", "07/01/2014", 0.1, 1000, 1, 0)',
        expectedResult: '350',
        description: 'FORMULA.ACCRINT',
        descriptionOpt: 'FORMULA.ACCRINT-OPT',
        returnType: 'number'
    },
    {
        code: 'CUMIPMT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'CUMIPMT({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}})',
        fields: '1:rate:number;2:nper:number;3:pv:number;4:start_period:number;5:end_period:number;6:type:number',
        example: 'CUMIPMT(0.1/12, 30*12, 100000, 13, 24, 0)',
        expectedResult: '-9916.77251395708',
        description: 'FORMULA.CUMIPMT',
        descriptionOpt: 'FORMULA.CUMIPMT-OPT',
        returnType: 'number'
    },
    {
        code: 'CUMPRINC',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'CUMPRINC({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}})',
        fields: '1:rate:number;2:nper:number;3:pv:number;4:start_period:number;5:end_period:number;6:type:number',
        example: 'CUMPRINC(0.1/12, 30*12, 100000, 13, 24, 0)',
        expectedResult: '-614.0863271085149',
        description: 'FORMULA.CUMPRINC',
        descriptionOpt: 'FORMULA.CUMPRINC-OPT',
        returnType: 'number'
    },
    {
        code: 'DB',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'DB({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:cost:number;2:salvage:number;3:life:number;4:period:number;5:month:number:*',
        example: 'DB(1000000, 100000, 6, 1, 6)',
        expectedResult: '159500',
        description: 'FORMULA.DB',
        descriptionOpt: 'FORMULA.DB-OPT',
        returnType: 'number'
    },
    {
        code: 'DDB',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'DDB({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:cost:number;2:salvage:number;3:life:number;4:period:number;5:factor:number:*',
        example: 'DDB(1000000, 100000, 6, 1, 1.5)',
        expectedResult: '250000',
        description: 'FORMULA.DDB',
        descriptionOpt: 'FORMULA.DDB-OPT',
        returnType: 'number'
    },
    {
        code: 'DOLLARDE',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'DOLLARDE({{1}}, {{2}})',
        fields: '1:fractional_dollar:number;2:fraction:number',
        example: 'DOLLARDE(1.1, 16)',
        expectedResult: '1.625',
        description: 'FORMULA.DOLLARDE',
        descriptionOpt: 'FORMULA.DOLLARDE-OPT',
        returnType: 'number'
    },
    {
        code: 'DOLLARFR',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'DOLLARFR({{1}}, {{2}})',
        fields: '1:decimal_dollar:number;2:fraction:number',
        example: 'DOLLARFR(1.625, 16)',
        expectedResult: '1.1',
        description: 'FORMULA.DOLLARFR',
        descriptionOpt: 'FORMULA.DOLLARFR-OPT',
        returnType: 'number'
    },
    {
        code: 'EFFECT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'EFFECT({{1}}, {{2}})',
        fields: '1:nominal_rate:number;2:npery:number',
        example: 'EFFECT(0.1, 4)',
        expectedResult: '0.10381289062499977',
        description: 'FORMULA.EFFECT',
        descriptionOpt: 'FORMULA.EFFECT-OPT',
        returnType: 'number'
    },
    {
        code: 'FV',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'FV({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:rate:number;2:nper:number;3:pmt:number;4:pv:number:*;5:type:number:*',
        example: 'FV(0.1/12, 10, -100, -1000, 0)',
        expectedResult: '2124.874409194097',
        description: 'FORMULA.FV',
        descriptionOpt: 'FORMULA.FV-OPT',
        returnType: 'number'
    },
    {
        code: 'FVSCHEDULE',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'FVSCHEDULE({{1}}, {{2}})',
        fields: '1:principal:number;2:schedule:number::[]',
        example: 'FVSCHEDULE(100, [0.09,0.1,0.11])',
        expectedResult: '133.08900000000003',
        description: 'FORMULA.FVSCHEDULE',
        descriptionOpt: 'FORMULA.FVSCHEDULE-OPT',
        returnType: 'number'
    },
    {
        code: 'IPMT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'IPMT({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}})',
        fields: '1:rate:number;2:per:number;3:nper:number;4:pv:number;5:fv:number:*;6:type:number:*',
        example: 'IPMT(0.1/12, 6, 2*12, 100000, 1000000, 0)',
        expectedResult: '928.8235718400465',
        description: 'FORMULA.IPMT',
        descriptionOpt: 'FORMULA.IPMT-OPT',
        returnType: 'number'
    },
    {
        code: 'IRR',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'IRR({{1}}, {{2}})',
        fields: '1:values:number::[];2:guess:number:*',
        example: 'IRR([-75000,12000,15000,18000,21000,24000], 0.075)',
        expectedResult: '0.05715142887178447',
        description: 'FORMULA.IRR',
        descriptionOpt: 'FORMULA.IRR-OPT',
        returnType: 'number'
    },
    {
        code: 'ISPMT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'ISPMT({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:rate:number;2:per:number;3:nper:number;4:pv:number',
        example: 'ISPMT(0.1/12, 6, 2*12, 100000)',
        expectedResult: '-625',
        description: 'FORMULA.ISPMT',
        descriptionOpt: 'FORMULA.ISPMT-OPT',
        returnType: 'number'
    },
    {
        code: 'MIRR',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'MIRR({{1}}, {{2}}, {{3}})',
        fields: '1:values:number::[];2:finance_rate:number;3:reinvest_rate:number',
        example: 'MIRR([-75000,12000,15000,18000,21000,24000], 0.1, 0.12)',
        expectedResult: '0.07971710360838036',
        description: 'FORMULA.MIRR',
        descriptionOpt: 'FORMULA.MIRR-OPT',
        returnType: 'number'
    },
    {
        code: 'NOMINAL',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'NOMINAL({{1}}, {{2}})',
        fields: '1:effect_rate:number;2:npery:number',
        example: 'NOMINAL(0.1, 4)',
        expectedResult: '0.09645475633778045',
        description: 'FORMULA.NOMINAL',
        descriptionOpt: 'FORMULA.NOMINAL-OPT',
        returnType: 'number'
    },
    {
        code: 'NPER',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'NPER({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:rate:number;2:pmt:number;3:pv:number;4:fv:number:*;5:type:number:*',
        example: 'NPER(0.1/12, -100, -1000, 10000, 0)',
        expectedResult: '63.39385422740764',
        description: 'FORMULA.NPER',
        descriptionOpt: 'FORMULA.NPER-OPT',
        returnType: 'number'
    },
    {
        code: 'NPV',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'NPV({{1}}, {{2}}, {{3}})',
        fields: '1:rate:number;2:value1:number;3:value2:number:*',
        example: 'NPV(0.1, -10000, 2000, 4000, 8000)',
        expectedResult: '1031.3503176012546',
        description: 'FORMULA.NPV',
        descriptionOpt: 'FORMULA.NPV-OPT',
        returnType: 'number'
    },
    {
        code: 'PDURATION',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'PDURATION({{1}}, {{2}}, {{3}})',
        fields: '1:rate:number;2:pv:number;3:fv:number',
        example: 'PDURATION(0.1, 1000, 2000)',
        expectedResult: '7.272540897341714',
        description: 'FORMULA.PDURATION',
        descriptionOpt: 'FORMULA.PDURATION-OPT',
        returnType: 'number'
    },
    {
        code: 'PMT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'PMT({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:rate:number;2:nper:number;3:pv:number;4:fv:number:*;5:type:number:*',
        example: 'PMT(0.1/12, 2*12, 100000, 1000000, 0)',
        expectedResult: '-42426.08563793503',
        description: 'FORMULA.PMT',
        descriptionOpt: 'FORMULA.PMT-OPT',
        returnType: 'number'
    },
    {
        code: 'PPMT',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'PPMT({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}})',
        fields: '1:rate:number;2:per:number;3:nper:number;4:pv:number;5:fv:number:*;6:type:number:*',
        example: 'PPMT(0.1/12, 6, 2*12, 100000, 1000000, 0)',
        expectedResult: '-43354.909209775076',
        description: 'FORMULA.PPMT',
        descriptionOpt: 'FORMULA.PPMT-OPT',
        returnType: 'number'
    },
    {
        code: 'PV',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'PV({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:rate:number;2:nper:number;3:pmt:number;4:fv:number:*;5:type:number:*',
        example: 'PV(0.1/12, 2*12, 1000, 10000, 0)',
        expectedResult: '-29864.950264779152',
        description: 'FORMULA.PV',
        descriptionOpt: 'FORMULA.PV-OPT',
        returnType: 'number'
    },
    {
        code: 'RATE',
        group: 'FORMULA.GROUP.FINANCIAL',
        formula: 'RATE({{1}}, {{2}}, {{3}}, {{4}}, {{5}}, {{6}})',
        fields: '1:nper:number;2:pmt:number;3:pv:number;4:fv:number:*;5:type:number:*;6:guess:number:*',
        example: 'RATE(2*12, -1000, -10000, 100000, 0, 0.1)',
        expectedResult: '0.06517891177181533',
        description: 'FORMULA.RATE',
        descriptionOpt: 'FORMULA.RATE-OPT',
        returnType: 'number'
    },
    {
        code: 'BIN2DEC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BIN2DEC({{1}})',
        fields: '1:number:number',
        example: 'BIN2DEC(101010)',
        expectedResult: '42',
        description: 'FORMULA.BIN2DEC',
        descriptionOpt: 'FORMULA.BIN2DEC-OPT',
        returnType: 'number'
    },
    {
        code: 'BIN2HEX',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BIN2HEX({{1}}, {{2}})',
        fields: '1:number:number;2:places:number:*',
        example: 'BIN2HEX(101010)',
        expectedResult: '2a',
        description: 'FORMULA.BIN2HEX',
        descriptionOpt: 'FORMULA.BIN2HEX-OPT',
        returnType: 'string'
    },
    {
        code: 'BIN2OCT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BIN2OCT({{1}}, {{2}})',
        fields: '1:number:number;2:places:number:*',
        example: 'BIN2OCT(101010)',
        expectedResult: '52',
        description: 'FORMULA.BIN2OCT',
        descriptionOpt: 'FORMULA.BIN2OCT-OPT',
        returnType: 'number'
    },
    {
        code: 'BITAND',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BITAND({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number',
        example: 'BITAND(42, 24)',
        expectedResult: '8',
        description: 'FORMULA.BITAND',
        descriptionOpt: 'FORMULA.BITAND-OPT',
        returnType: 'number'
    },
    {
        code: 'BITLSHIFT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BITLSHIFT({{1}}, {{2}})',
        fields: '1:number:number;2:shift_amount:number',
        example: 'BITLSHIFT(42, 24)',
        expectedResult: '704643072',
        description: 'FORMULA.BITLSHIFT',
        descriptionOpt: 'FORMULA.BITLSHIFT-OPT',
        returnType: 'number'
    },
    {
        code: 'BITOR',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BITOR({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number',
        example: 'BITOR(42, 24)',
        expectedResult: '58',
        description: 'FORMULA.BITOR',
        descriptionOpt: 'FORMULA.BITOR-OPT',
        returnType: 'number'
    },
    {
        code: 'BITRSHIFT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BITRSHIFT({{1}}, {{2}})',
        fields: '1:number:number;2:shift_amount:number',
        example: 'BITRSHIFT(42, 2)',
        expectedResult: '10',
        description: 'FORMULA.BITRSHIFT',
        descriptionOpt: 'FORMULA.BITRSHIFT-OPT',
        returnType: 'number'
    },
    {
        code: 'BITXOR',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'BITXOR({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number',
        example: 'BITXOR(42, 24)',
        expectedResult: '50',
        description: 'FORMULA.BITXOR',
        descriptionOpt: 'FORMULA.BITXOR-OPT',
        returnType: 'number'
    },
    {
        code: 'COMPLEX',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'COMPLEX({{1}}, {{2}}, {{3}})',
        fields: '1:real_num:number;2:i_num:number;3:suffix:string:*',
        example: 'COMPLEX(3, 4)',
        expectedResult: '3+4i',
        description: 'FORMULA.COMPLEX',
        descriptionOpt: 'FORMULA.COMPLEX-OPT',
        returnType: 'string'
    },
    {
        code: 'CONVERT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'CONVERT({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:from_unit:string;3:to_unit:string',
        example: 'CONVERT(64, "kibyte", "bit")',
        expectedResult: '524288',
        description: 'FORMULA.CONVERT',
        descriptionOpt: 'FORMULA.CONVERT-OPT',
        returnType: 'number'
    },
    {
        code: 'DEC2BIN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'DEC2BIN({{1}}, {{2}})',
        fields: '1:number:number;2:places:number:*',
        example: 'DEC2BIN(42)',
        expectedResult: '101010',
        description: 'FORMULA.DEC2BIN',
        descriptionOpt: 'FORMULA.DEC2BIN-OPT',
        returnType: 'string'
    },
    {
        code: 'DEC2HEX',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'DEC2HEX({{1}}, {{2}})',
        fields: '1:number:number;2:places:number:*',
        example: 'DEC2HEX(42)',
        expectedResult: '2a',
        description: 'FORMULA.DEC2HEX',
        descriptionOpt: 'FORMULA.DEC2HEX-OPT',
        returnType: 'string'
    },
    {
        code: 'DEC2OCT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'DEC2OCT({{1}}, {{2}})',
        fields: '1:number:number;2:places:number:*',
        example: 'DEC2OCT(42)',
        expectedResult: '52',
        description: 'FORMULA.DEC2OCT',
        descriptionOpt: 'FORMULA.DEC2OCT-OPT',
        returnType: 'number'
    },
    {
        code: 'DELTA',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'DELTA({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'DELTA(42, 42)',
        expectedResult: '1',
        description: 'FORMULA.DELTA',
        descriptionOpt: 'FORMULA.DELTA-OPT',
        returnType: 'number'
    },
    {
        code: 'ERF',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'ERF({{1}}, {{2}})',
        fields: '1:lower_limit:number;2:upper_limit:number:*',
        example: 'ERF(1)',
        expectedResult: '0.8427007929497149',
        description: 'FORMULA.ERF',
        descriptionOpt: 'FORMULA.ERF-OPT',
        returnType: 'number'
    },
    {
        code: 'ERFC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'ERFC({{1}})',
        fields: '1:number:number',
        example: 'ERFC(1)',
        expectedResult: '0.1572992070502851',
        description: 'FORMULA.ERFC',
        descriptionOpt: 'FORMULA.ERFC-OPT',
        returnType: 'number'
    },
    {
        code: 'GESTEP',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'GESTEP({{1}}, {{2}})',
        fields: '1:number:number;2:step:number:*',
        example: 'GESTEP(42, 24)',
        expectedResult: '1',
        description: 'FORMULA.GESTEP',
        descriptionOpt: 'FORMULA.GESTEP-OPT',
        returnType: 'number'
    },
    {
        code: 'HEX2BIN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'HEX2BIN({{1}})',
        fields: '1:number:number;2:places:number:*',
        example: 'HEX2BIN("2a")',
        expectedResult: '101010',
        description: 'FORMULA.HEX2BIN',
        descriptionOpt: 'FORMULA.HEX2BIN-OPT',
        returnType: 'string'
    },
    {
        code: 'HEX2DEC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'HEX2DEC({{1}})',
        fields: '1:number:number;2:places:number:*',
        example: 'HEX2DEC("2a")',
        expectedResult: '42',
        description: 'FORMULA.HEX2DEC',
        descriptionOpt: 'FORMULA.HEX2DEC-OPT',
        returnType: 'number'
    },
    {
        code: 'HEX2OCT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'HEX2OCT({{1}})',
        fields: '1:number:number;2:places:number:*',
        example: 'HEX2OCT("2a")',
        expectedResult: '52',
        description: 'FORMULA.HEX2OCT',
        descriptionOpt: 'FORMULA.HEX2OCT-OPT',
        returnType: 'number'
    },
    {
        code: 'IMABS',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMABS({{1}})',
        fields: '1:inumber:string',
        example: 'IMABS("3+4i")',
        expectedResult: '5',
        description: 'FORMULA.IMABS',
        descriptionOpt: 'FORMULA.IMABS-OPT',
        returnType: 'number'
    },
    {
        code: 'IMAGINARY',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMAGINARY({{1}})',
        fields: '1:inumber:string',
        example: 'IMAGINARY("3+4i")',
        expectedResult: '4',
        description: 'FORMULA.IMAGINARY',
        descriptionOpt: 'FORMULA.IMAGINARY-OPT',
        returnType: 'number'
    },
    {
        code: 'IMARGUMENT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMARGUMENT({{1}})',
        fields: '1:inumber:string',
        example: 'IMARGUMENT("3+4i")',
        expectedResult: '0.9272952180016122',
        description: 'FORMULA.IMARGUMENT',
        descriptionOpt: 'FORMULA.IMARGUMENT-OPT',
        returnType: 'number'
    },
    {
        code: 'IMCONJUGATE',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCONJUGATE({{1}})',
        fields: '1:inumber:string',
        example: 'IMCONJUGATE("3+4i")',
        expectedResult: '3-4i',
        description: 'FORMULA.IMCONJUGATE',
        descriptionOpt: 'FORMULA.IMCONJUGATE-OPT',
        returnType: 'string'
    },
    {
        code: 'IMCOS',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCOS({{1}})',
        fields: '1:inumber:string',
        example: 'IMCOS("1+i")',
        expectedResult: '0.8337300251311491-0.9888977057628651i',
        description: 'FORMULA.IMCOS',
        descriptionOpt: 'FORMULA.IMCOS-OPT',
        returnType: 'string'
    },
    {
        code: 'IMCOSH',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCOSH({{1}})',
        fields: '1:inumber:string',
        example: 'IMCOSH("1+i")',
        expectedResult: '0.8337300251311491+0.9888977057628651i',
        description: 'FORMULA.IMCOSH',
        descriptionOpt: 'FORMULA.IMCOSH-OPT',
        returnType: 'string'
    },
    {
        code: 'IMCOT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCOT({{1}})',
        fields: '1:inumber:string',
        example: 'IMCOT("1+i")',
        expectedResult: '0.21762156185440265-0.8680141428959249i',
        description: 'FORMULA.IMCOT',
        descriptionOpt: 'FORMULA.IMCOT-OPT',
        returnType: 'string'
    },
    {
        code: 'IMCSC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCSC({{1}})',
        fields: '1:inumber:string',
        example: 'IMCSC("1+i")',
        expectedResult: '0.6215180171704283-0.3039310016284264i',
        description: 'FORMULA.IMCSC',
        descriptionOpt: 'FORMULA.IMCSC-OPT',
        returnType: 'string'
    },
    {
        code: 'IMCSCH',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMCSCH({{1}})',
        fields: '1:inumber:string',
        example: 'IMCSCH("1+i")',
        expectedResult: '0.3039310016284264-0.6215180171704283i',
        description: 'FORMULA.IMCSCH',
        descriptionOpt: 'FORMULA.IMCSCH-OPT',
        returnType: 'string'
    },
    {
        code: 'IMDIV',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMDIV({{1}}, {{2}})',
        fields: '1:inumber1:string;2:inumber2:string',
        example: 'IMDIV("1+2i", "3+4i")',
        expectedResult: '0.44+0.08i',
        description: 'FORMULA.IMDIV',
        descriptionOpt: 'FORMULA.IMDIV-OPT',
        returnType: 'string'
    },
    {
        code: 'IMEXP',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMEXP({{1}})',
        fields: '1:inumber:string',
        example: 'IMEXP("1+i")',
        expectedResult: '1.4686939399158851+2.2873552871788423i',
        description: 'FORMULA.IMEXP',
        descriptionOpt: 'FORMULA.IMEXP-OPT',
        returnType: 'string'
    },
    {
        code: 'IMLN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMLN({{1}})',
        fields: '1:inumber:string',
        example: 'IMLN("1+i")',
        expectedResult: '0.3465735902799727+0.7853981633974483i',
        description: 'FORMULA.IMLN',
        descriptionOpt: 'FORMULA.IMLN-OPT',
        returnType: 'string'
    },
    {
        code: 'IMLOG10',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMLOG10({{1}})',
        fields: '1:inumber:string',
        example: 'IMLOG10("1+i")',
        expectedResult: '0.1505149978319906+0.3410940884604603i',
        description: 'FORMULA.IMLOG10',
        descriptionOpt: 'FORMULA.IMLOG10-OPT',
        returnType: 'string'
    },
    {
        code: 'IMLOG2',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMLOG2({{1}})',
        fields: '1:inumber:string',
        example: 'IMLOG2("1+i")',
        expectedResult: '0.5000000000000001+1.1330900354567985i',
        description: 'FORMULA.IMLOG2',
        descriptionOpt: 'FORMULA.IMLOG2-OPT',
        returnType: 'string'
    },
    {
        code: 'IMPOWER',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMPOWER({{1}}, {{2}})',
        fields: '1:inumber:string;2:number:number',
        example: 'IMPOWER("1+i", 2)',
        expectedResult: '1.2246063538223775e-16+2.0000000000000004i',
        description: 'FORMULA.IMPOWER',
        descriptionOpt: 'FORMULA.IMPOWER-OPT',
        returnType: 'string'
    },
    {
        code: 'IMPRODUCT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMPRODUCT({{1}}, {{2}})',
        fields: '1:inumber1:string;2:inumber2:string:*',
        example: 'IMPRODUCT("1+2i", "3+4i", "5+6i")',
        expectedResult: '-85+20i',
        description: 'FORMULA.IMPRODUCT',
        descriptionOpt: 'FORMULA.IMPRODUCT-OPT',
        returnType: 'string'
    },
    {
        code: 'IMREAL',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMREAL({{1}})',
        fields: '1:inumber:string',
        example: 'IMREAL("3+4i")',
        expectedResult: '3',
        description: 'FORMULA.IMREAL',
        descriptionOpt: 'FORMULA.IMREAL-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSEC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSEC({{1}})',
        fields: '1:inumber:string',
        example: 'IMSEC("1+i")',
        expectedResult: '0.4983370305551868+0.591083841721045i',
        description: 'FORMULA.IMSEC',
        descriptionOpt: 'FORMULA.IMSEC-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSECH',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSECH({{1}})',
        fields: '1:inumber:string',
        example: 'IMSECH("1+i")',
        expectedResult: '0.4983370305551868-0.591083841721045i',
        description: 'FORMULA.IMSECH',
        descriptionOpt: 'FORMULA.IMSECH-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSIN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSIN({{1}})',
        fields: '1:inumber:string',
        example: 'IMSIN("1+i")',
        expectedResult: '1.2984575814159773+0.6349639147847361i',
        description: 'FORMULA.IMSIN',
        descriptionOpt: 'FORMULA.IMSIN-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSINH',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSINH({{1}})',
        fields: '1:inumber:string',
        example: 'IMSINH("1+i")',
        expectedResult: '0.6349639147847361+1.2984575814159773i',
        description: 'FORMULA.IMSINH',
        descriptionOpt: 'FORMULA.IMSINH-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSQRT',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSQRT({{1}})',
        fields: '1:inumber:string',
        example: 'IMSQRT("1+i")',
        expectedResult: '1.0986841134678098+0.45508986056222733i',
        description: 'FORMULA.IMSQRT',
        descriptionOpt: 'FORMULA.IMSQRT-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSUB',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSUB({{1}}, {{2}})',
        fields: '1:inumber1:string;2:inumber2:string',
        example: 'IMSUB("3+4i", "1+2i")',
        expectedResult: '2+2i',
        description: 'FORMULA.IMSUB',
        descriptionOpt: 'FORMULA.IMSUB-OPT',
        returnType: 'string'
    },
    {
        code: 'IMSUM',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMSUM({{1}}, {{2}}, {{3}})',
        fields: '1:inumber1:string;2:inumber2:string:*;3:inumber3:string:*',
        example: 'IMSUM("1+2i", "3+4i", "5+6i")',
        expectedResult: '9+12i',
        description: 'FORMULA.IMSUM',
        descriptionOpt: 'FORMULA.IMSUM-OPT',
        returnType: 'string'
    },
    {
        code: 'IMTAN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'IMTAN({{1}})',
        fields: '1:inumber:string',
        example: 'IMTAN("1+i")',
        expectedResult: '0.2717525853195117+1.0839233273386946i',
        description: 'FORMULA.IMTAN',
        descriptionOpt: 'FORMULA.IMTAN-OPT',
        returnType: 'string'
    },
    {
        code: 'OCT2BIN',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'OCT2BIN({{1}})',
        fields: '1:number:number;2:places:number:*',
        example: 'OCT2BIN("52")',
        expectedResult: '101010',
        description: 'FORMULA.OCT2BIN',
        descriptionOpt: 'FORMULA.OCT2BIN-OPT',
        returnType: 'string'
    },
    {
        code: 'OCT2DEC',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'OCT2DEC({{1}})',
        fields: '1:number:number',
        example: 'OCT2DEC("52")',
        expectedResult: '42',
        description: 'FORMULA.OCT2DEC',
        descriptionOpt: 'FORMULA.OCT2DEC-OPT',
        returnType: 'number'
    },
    {
        code: 'OCT2HEX',
        group: 'FORMULA.GROUP.ENGINEERING',
        formula: 'OCT2HEX({{1}})',
        fields: '1:number:number;2:places:number:*',
        example: 'OCT2HEX("52")',
        expectedResult: '2a',
        description: 'FORMULA.OCT2HEX',
        descriptionOpt: 'FORMULA.OCT2HEX-OPT',
        returnType: 'string'
    },
    {
        code: 'ABS',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ABS({{1}})',
        fields: '1:number:number',
        example: 'ABS(-4)',
        expectedResult: '4',
        description: 'FORMULA.ABS',
        descriptionOpt: 'FORMULA.ABS-OPT',
        returnType: 'number'
    },
    {
        code: 'ACOS',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ACOS({{1}})',
        fields: '1:number:number',
        example: 'ACOS(-0.5)',
        expectedResult: '2.0943951023931957',
        description: 'FORMULA.ACOS',
        descriptionOpt: 'FORMULA.ACOS-OPT',
        returnType: 'number'
    },
    {
        code: 'ACOSH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ACOSH({{1}})',
        fields: '1:number:number',
        example: 'ACOSH(10)',
        expectedResult: '2.993222846126381',
        description: 'FORMULA.ACOSH',
        descriptionOpt: 'FORMULA.ACOSH-OPT',
        returnType: 'number'
    },
    {
        code: 'ACOT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ACOT({{1}})',
        fields: '1:number:number',
        example: 'ACOT(2)',
        expectedResult: '0.46364760900080615',
        description: 'FORMULA.ACOT',
        descriptionOpt: 'FORMULA.ACOT-OPT',
        returnType: 'number'
    },
    {
        code: 'ACOTH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ACOTH({{1}})',
        fields: '1:number:number',
        example: 'ACOTH(6)',
        expectedResult: '0.16823611831060645',
        description: 'FORMULA.ACOTH',
        descriptionOpt: 'FORMULA.ACOTH-OPT',
        returnType: 'number'
    },
    {
        code: 'AGGREGATE',
        group: 'FORMULA.GROUP.MATH',
        formula: 'AGGREGATE({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:function_num:number;2:options:number;3:ref1:any::[];4:ref2::any::[]',
        example: 'AGGREGATE(9, 4, [-5,15], [32,"Hello World!"])',
        expectedResult: '10.32',
        description: 'FORMULA.AGGREGATE',
        descriptionOpt: 'FORMULA.AGGREGATE-OPT',
        returnType: 'number'
    },
    {
        code: 'ARABIC',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ARABIC({{1}})',
        fields: '1:roman_text:string',
        example: 'ARABIC("MCMXII")',
        expectedResult: '1912',
        description: 'FORMULA.ARABIC',
        descriptionOpt: 'FORMULA.ARABIC-OPT',
        returnType: 'number'
    },
    {
        code: 'ASIN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ASIN({{1}})',
        fields: '1:number:number',
        example: 'ASIN(-0.5)',
        expectedResult: '-0.5235987755982988',
        description: 'FORMULA.ASIN',
        descriptionOpt: 'FORMULA.ASIN-OPT',
        returnType: 'number'
    },
    {
        code: 'ASINH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ASINH({{1}})',
        fields: '1:number:number',
        example: 'ASINH(-2.5)',
        expectedResult: '-1.6472311463710965',
        description: 'FORMULA.ASINH',
        descriptionOpt: 'FORMULA.ASINH-OPT',
        returnType: 'number'
    },
    {
        code: 'ATAN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ATAN({{1}})',
        fields: '1:number:number',
        example: 'ATAN(1)',
        expectedResult: '0.7853981633974483',
        description: 'FORMULA.ATAN',
        descriptionOpt: 'FORMULA.ATAN-OPT',
        returnType: 'number'
    },
    {
        code: 'ATAN2',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ATAN2({{1}}, {{2}})',
        fields: '1:x_num:number;2:y_num:number',
        example: 'ATAN2(-1, -1)',
        expectedResult: '-2.356194490192345',
        description: 'FORMULA.ATAN2',
        descriptionOpt: 'FORMUAL.ATAN2-OPT',
        returnType: 'number'
    },
    {
        code: 'ATANH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ATANH({{1}})',
        fields: '1:number:number',
        example: 'ATANH(-0.1)',
        expectedResult: '-0.10033534773107562',
        description: 'FORMULA.ATANH',
        descriptionOpt: 'FORMULA.ATANH-OPT',
        returnType: 'number'
    },
    {
        code: 'BASE',
        group: 'FORMULA.GROUP.MATH',
        formula: 'BASE({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:radix:number;3:min_length:number',
        example: 'BASE(15, 2, 10)',
        expectedResult: '1111',
        description: 'FORMULA.BASE',
        descriptionOpt: 'FORMULA.BASE-OPT',
        returnType: 'number'
    },
    {
        code: 'CEILING',
        group: 'FORMULA.GROUP.MATH',
        formula: 'CEILING({{1}}, {{2}})',
        fields: '1:number:number;2:significance:number',
        example: 'CEILING(-5.5, 2)',
        expectedResult: '-6',
        description: 'FORMULA.CEILING',
        descriptionOpt: 'FORMULA.CEILING-OPT',
        returnType: 'number'
    },
    {
        code: 'CEILINGMATH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'CEILINGMATH({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:significance:number:*;3:mode:number:*',
        example: 'CEILINGMATH(-5.5, 2, -1)',
        expectedResult: '-6',
        description: 'FORMULA.CEILINGMATH',
        descriptionOpt: 'FORMULA.CEILINGMATH-OPT',
        returnType: 'number'
    },
    {
        code: 'CEILINGPRECISE',
        group: 'FORMULA.GROUP.MATH',
        formula: 'CEILINGPRECISE({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:significance:number:*',
        example: 'CEILINGPRECISE(-4.1, -2)',
        expectedResult: '-4',
        description: 'FORMULA.CEILINGPRECISE',
        descriptionOpt: 'FORMULA.CEILINGPRECISE-OPT',
        returnType: 'number'
    },
    {
        code: 'COMBIN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COMBIN({{1}}, {{2}})',
        fields: '1:number:number;2:number_chosen:number',
        example: 'COMBIN(8, 2)',
        expectedResult: '28',
        description: 'FORMULA.COMBIN',
        descriptionOpt: 'FORMULA.COMBIN-OPT',
        returnType: 'number'
    },
    {
        code: 'COMBINA',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COMBINA({{1}}, {{2}})',
        fields: '1:number:number;2:number_chosen:number',
        example: 'COMBINA(4, 3)',
        expectedResult: '20',
        description: 'FORMULA.COMBINA',
        descriptionOpt: 'FORMULA.COMBINA-OPT',
        returnType: 'number'
    },
    {
        code: 'COS',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COS({{1}})',
        fields: '1:number:number',
        example: 'COS(1)',
        expectedResult: '0.5403023058681398',
        description: 'FORMULA.COS',
        descriptionOpt: 'FORMULA.COS-OPT',
        returnType: 'number'
    },
    {
        code: 'COSH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COSH({{1}})',
        fields: '1:number:number',
        example: 'COSH(1)',
        expectedResult: '1.5430806348152437',
        description: 'FORMULA.COSH',
        descriptionOpt: 'FORMULA.COSH-OPT',
        returnType: 'number'
    },
    {
        code: 'COT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COT({{1}})',
        fields: '1:number:number',
        example: 'COT(30)',
        expectedResult: '-0.15611995216165922',
        description: 'FORMULA.COT',
        descriptionOpt: 'FORMULA.COT-OPT',
        returnType: 'number'
    },
    {
        code: 'COTH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'COTH({{1}})',
        fields: '1:number:number',
        example: 'COTH(2)',
        expectedResult: '1.0373147207275482',
        description: 'FORMULA.COTH',
        descriptionOpt: 'FORMULA.COTH-OPT',
        returnType: 'number'
    },
    {
        code: 'CSC',
        group: 'FORMULA.GROUP.MATH',
        formula: 'CSC({{1}})',
        fields: '1:numer:number',
        example: 'CSC(15)',
        expectedResult: '1.5377805615408537',
        description: 'FORMULA.CSC',
        descriptionOpt: 'FORMULA.CSC-OPT',
        returnType: 'number'
    },
    {
        code: 'CSCH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'CSCH({{1}})',
        fields: '1:number:number',
        example: 'CSCH(1.5)',
        expectedResult: '0.46964244059522464',
        description: 'FORMULA.CSCH',
        descriptionOpt: 'FORMULA.CSCH-OPT',
        returnType: 'number'
    },
    {
        code: 'DECIMAL',
        group: 'FORMULA.GROUP.MATH',
        formula: 'DECIMAL({{1}}, {{2}})',
        fields: '1:number:string;2:radix:number',
        example: 'DECIMAL("FF", 16)',
        expectedResult: '255',
        description: 'FORMULA.DECIMAL',
        descriptionOpt: 'FORMULA.DECIMAL-OPT',
        returnType: 'number'
    },
    {
        code: 'ERF',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ERF({{1}})',
        fields: '1:lower_limit:number;2:upper_limit:number:*',
        example: 'ERF(1)',
        expectedResult: '0.8427007929497149',
        description: 'FORMULA.ERF',
        descriptionOpt: 'FORMULA.ERP-OPT',
        returnType: 'number'
    },
    {
        code: 'ERFC',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ERFC({{1}})',
        fields: '1:number:number',
        example: 'ERFC(1)',
        expectedResult: '0.1572992070502851',
        description: 'FORMULA.ERFC',
        descriptionOpt: 'FORMULA.ERFC-OPT',
        returnType: 'number'
    },
    {
        code: 'EVEN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'EVEN({{1}})',
        fields: '1:number:number',
        example: 'EVEN(-1)',
        expectedResult: '-2',
        description: 'FORMULA.EVEN',
        descriptionOpt: 'FORMULA.EVEN-OPT',
        returnType: 'number'
    },
    {
        code: 'EXP',
        group: 'FORMULA.GROUP.MATH',
        formula: 'EXP({{1}})',
        fields: '1:number:number',
        example: 'EXP(1)',
        expectedResult: '2.718281828459045',
        description: 'FORMULA.EXP',
        descriptionOpt: 'FORMULA.EXP-OPT',
        returnType: 'number'
    },
    {
        code: 'FACT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'FACT({{1}})',
        fields: '1:number:number',
        example: 'FACT(5)',
        expectedResult: '120',
        description: 'FORMULA.FACT',
        descriptionOpt: 'FORMULA.FACT-OPT',
        returnType: 'number'
    },
    {
        code: 'FACTDOUBLE',
        group: 'FORMULA.GROUP.MATH',
        formula: 'FACTDOUBLE({{1}})',
        fields: '1:number:number',
        example: 'FACTDOUBLE(7)',
        expectedResult: '105',
        description: 'FORMULA.FACTDOUBLE',
        descriptionOpt: 'FORMULA.FACTDOUBLE-OPT',
        returnType: 'number'
    },
    {
        code: 'FLOOR',
        group: 'FORMULA.GROUP.MATH',
        formula: 'FLOOR({{1}}, {{2}})',
        fields: '1:number:number;2:significance:number:*',
        example: 'FLOOR(-3.1)',
        expectedResult: '-4',
        description: 'FORMULA.FLOOR',
        descriptionOpt: 'FORMULA.FLOOR-OPT',
        returnType: 'number'
    },
    {
        code: 'FLOORMATH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'FLOORMATH({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:significance:number:*;3:mode:number:*',
        example: 'FLOORMATH(-4.1, -2, -1)',
        expectedResult: '-4',
        description: 'FORMULA.FLOORMATH',
        descriptionOpt: 'FORMULA.FLOORMATH-OPT',
        returnType: 'number'
    },
    {
        code: 'FLOORPRECISE',
        group: 'FORMULA.GROUP.MATH',
        formula: 'FLOORPRECISE({{1}}, {{2}})',
        fields: '1:number:number;2:significance:number:*',
        example: 'FLOORPRECISE(-3.1, -2)',
        expectedResult: '-4',
        description: 'FORMULA.FLOORPRECISE',
        descriptionOpt: 'FORMULA.FLOORPRECISE-OPT',
        returnType: 'number'
    },
    {
        code: 'GCD',
        group: 'FORMULA.GROUP.MATH',
        formula: 'GCD({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'GCD(24, 36)',
        expectedResult: '12',
        description: 'FORMULA.GCD',
        descriptionOpt: 'FORMULA.GCD-OPT',
        returnType: 'number'
    },
    {
        code: 'INT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'INT({{1}})',
        fields: '1:number:number',
        example: 'INT(-8.9)',
        expectedResult: '-9',
        description: 'FORMULA.INT',
        descriptionOpt: 'FORMULA.INT-OPT',
        returnType: 'number'
    },
    {
        code: 'ISEVEN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ISEVEN({{1}})',
        fields: '1:value:number',
        example: 'ISEVEN(-2.5)',
        expectedResult: 'true',
        description: 'FORMULA.ISEVEN',
        descriptionOpt: 'FORMULA.ISEVEN-OPT',
        returnType: 'boolean'
    },
    {
        code: 'ISOCEILING',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ISOCEILING({{1}}, {{2}})',
        fields: '1:number:number;2:significance:number:*',
        example: 'ISOCEILING(-4.1, -2)',
        expectedResult: '-4',
        description: 'FORMULA.ISOCEILING',
        descriptionOpt: 'FORMULA.ISOCEILING-OPT',
        returnType: 'number'
    },
    {
        code: 'ISODD',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ISODD({{1}})',
        fields: '1:value:number',
        example: 'ISODD(-2.5)',
        expectedResult: 'false',
        description: 'FORMULA.ISODD',
        descriptionOpt: 'FORMULA.ISODD-OPT',
        returnType: 'boolean'
    },
    {
        code: 'LCM',
        group: 'FORMULA.GROUP.MATH',
        formula: 'LCM({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'LCM(24, 36)',
        expectedResult: '144',
        description: 'FORMULA.LCM',
        descriptionOpt: 'FORMULA.LCM-OPT',
        returnType: 'number'
    },
    {
        code: 'LN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'LN({{1}})',
        fields: '1:number:number',
        example: 'LN(86)',
        expectedResult: '4.454347296253507',
        description: 'FORMULA.LN',
        descriptionOpt: 'FORMULA.LN-OPT',
        returnType: 'number'
    },
    {
        code: 'LOG',
        group: 'FORMULA.GROUP.MATH',
        formula: 'LOG({{1}}, {{2}})',
        fields: '1:number:number;2:base:number:*',
        example: 'LOG(8, 2)',
        expectedResult: '3',
        description: 'FORMULA.LOG',
        descriptionOpt: 'FORMULA.LOG-OPT',
        returnType: 'number'
    },
    {
        code: 'LOG10',
        group: 'FORMULA.GROUP.MATH',
        formula: 'LOG10({{1}})',
        fields: '1:number:number',
        example: 'LOG10(100000)',
        expectedResult: '5',
        description: 'FORMULA.LOG10',
        descriptionOpt: 'FORMULA.LOG10-OPT',
        returnType: 'number'
    },
    {
        code: 'MOD',
        group: 'FORMULA.GROUP.MATH',
        formula: 'MOD({{1}}, {{2}})',
        fields: '1:number:number;2:divisor:number',
        example: 'MOD(3, -2)',
        expectedResult: '-1',
        description: 'FORMULA.MOD',
        descriptionOpt: 'FORMULA.MOD-OPT',
        returnType: 'number'
    },
    {
        code: 'MROUND',
        group: 'FORMULA.GROUP.MATH',
        formula: 'MROUND({{1}}, {{2}})',
        fields: '1:number:number;2:significance:number',
        example: 'MROUND(-10, -3)',
        expectedResult: '-9',
        description: 'FORMULA.MROUND',
        descriptionOpt: 'FORMULA.MROUND-OPT',
        returnType: 'number'
    },
    {
        code: 'MULTINOMIAL',
        group: 'FORMULA.GROUP.MATH',
        formula: 'MULTINOMIAL({{1}}, {{2}}, {{3}})',
        fields: '1:number1:number;2:number2:number:*;3:number3:number:*',
        example: 'MULTINOMIAL(2, 3, 4)',
        expectedResult: '1260',
        description: 'FORMULA.MULTINOMIAL',
        descriptionOpt: 'FORMULA.MULTINOMIAL-OPT',
        returnType: 'number'
    },
    {
        code: 'ODD',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ODD({{1}})',
        fields: '1:number:number',
        example: 'ODD(-1.5)',
        expectedResult: '-3',
        description: 'FORMULA.ODD',
        descriptionOpt: 'FORMULA.ODD-OPT',
        returnType: 'number'
    },
    {
        code: 'POWER',
        group: 'FORMULA.GROUP.MATH',
        formula: 'POWER({{1}}, {{2}})',
        fields: '1:number:number;2:power:number',
        example: 'POWER(5, 2)',
        expectedResult: '25',
        description: 'FORMULA.POWER',
        descriptionOpt: 'FORMULA.POWER-OPT',
        returnType: 'number'
    },
    {
        code: 'PRODUCT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'PRODUCT({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'PRODUCT(5, 15, 30)',
        expectedResult: '2250',
        description: 'FORMULA.PRODUCT',
        descriptionOpt: 'FORMULA.PRODUCT-OPT',
        returnType: 'number'
    },
    {
        code: 'QUOTIENT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'QUOTIENT({{1}}, {{2}})',
        fields: '1:numerator:number;2:denominator:number',
        example: 'QUOTIENT(-10, 3)',
        expectedResult: '-3',
        description: 'FORMULA.QUOTIENT',
        descriptionOpt: 'FORMULA.QUOTIENT-OPT',
        returnType: 'number'
    },
    {
        code: 'RADIANS',
        group: 'FORMULA.GROUP.MATH',
        formula: 'RADIANS({{1}})',
        fields: '1:angle:number',
        example: 'RADIANS(180)',
        expectedResult: '3.141592653589793',
        description: 'FORMULA.RADIANS',
        descriptionOpt: 'FROMULA.RADIANS-OPT',
        returnType: 'number'
    },
    {
        code: 'RAND',
        group: 'FORMULA.GROUP.MATH',
        formula: 'RAND()',
        fields: '',
        example: 'RAND()',
        expectedResult: '[Random real number greater between 0 and 1]',
        description: 'FORMULA.RAND',
        descriptionOpt: 'FORMULA.RAND-OPT',
        returnType: 'number',
        isFavorite: true,
    },
    {
        code: 'RANDBETWEEN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'RANDBETWEEN({{1}}, {{2}})',
        fields: '1:bottom:number;2:top:number',
        example: 'RANDBETWEEN(-1, 1)',
        expectedResult: '[Random integer between bottom and top]',
        description: 'FORMULA.RANDBETWEEN',
        descriptionOpt: 'FORMULA.RANDBETWEEN-OPT',
        returnType: 'number'
    },
    {
        code: 'ROUND',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ROUND({{1}}, {{2}})',
        fields: '1:number:number;2:num_digits:number',
        example: 'ROUND(626.3, -3)',
        expectedResult: '1000',
        description: 'FORMULA.ROUND',
        descriptionOpt: 'FORMULA.ROUND-OPT',
        returnType: 'number'
    },
    {
        code: 'ROUNDDOWN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ROUNDDOWN({{1}}, {{2}})',
        fields: '1:number:number;2:num_digits:number',
        example: 'ROUNDDOWN(-3.14159, 2)',
        expectedResult: '-3.14',
        description: 'FORMULA.ROUNDDOWN',
        descriptionOpt: 'FORMULA.ROUNDDOWN-OPT',
        returnType: 'number'
    },
    {
        code: 'ROUNDUP',
        group: 'FORMULA.GROUP.MATH',
        formula: 'ROUNDUP({{1}}, {{2}})',
        fields: '1:number:number;2:num_digits:number',
        example: 'ROUNDUP(-3.14159, 2)',
        expectedResult: '-3.15',
        description: 'FORMULA.ROUNDUP',
        descriptionOpt: 'FORMULA.ROUNDUP-OPT',
        returnType: 'number'
    },
    {
        code: 'SEC',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SEC({{1}})',
        fields: '1:number:number',
        example: 'SEC(45)',
        expectedResult: '1.9035944074044246',
        description: 'FORMULA.SEC',
        descriptionOpt: 'FORMULA.SEC-OPT',
        returnType: 'number'
    },
    {
        code: 'SECH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SECH({{1}})',
        fields: '1:number:number',
        example: 'SECH(45)',
        expectedResult: '5.725037161098787e-20',
        description: 'FORMULA.SECH',
        descriptionOpt: 'FORMULA.SECH-OPT',
        returnType: 'number'
    },
    {
        code: 'SIGN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SIGN({{1}})',
        fields: '1:number:number',
        example: 'SIGN(-0.00001)',
        expectedResult: '-1',
        description: 'FORMULA.SIGN',
        descriptionOpt: 'FORMULA.SIGN-OPT',
        returnType: 'number'
    },
    {
        code: 'SIN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SIN({{1}})',
        fields: '1:number:number',
        example: 'SIN(1)',
        expectedResult: '0.8414709848078965',
        description: 'FORMULA.SIN',
        descriptionOpt: 'FORMULA.SIN-OPT',
        returnType: 'number'
    },
    {
        code: 'SINH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SINH({{1}})',
        fields: '1:number:number',
        example: 'SINH(1)',
        expectedResult: '1.1752011936438014',
        description: 'FORMULA.SINH',
        descriptionOpt: 'FORMULA.SINH-OPT',
        returnType: 'number'
    },
    {
        code: 'SQRT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SQRT({{1}})',
        fields: '1:number:number',
        example: 'SQRT(16)',
        expectedResult: '4',
        description: 'FORMULA.SQRT',
        descriptionOpt: 'FORMULA.SQRT-OPT',
        returnType: 'number'
    },
    {
        code: 'SQRTPI',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SQRTPI({{1}})',
        fields: '1:number:number',
        example: 'SQRTPI(2)',
        expectedResult: '2.5066282746310002',
        description: 'FORMULA.SQRTPI',
        descriptionOpt: 'FORMULA.SQRTPI-OPT',
        returnType: 'number'
    },
    {
        code: 'SUBTOTAL',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUBTOTAL({{1}}, {{2}}, {{3}})',
        fields: '1:function_num:number;2:ref1:number;3:number:number:*',
        example: 'SUBTOTAL(9, [-5,15], [32,"Hello World!"])',
        expectedResult: '10.32',
        description: 'FORMULA.SUBTOTAL',
        descriptionOpt: 'FORMULA.SUBTOTAL-OPT',
        returnType: 'number'
    },
    {
        code: 'SUM',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUM({{1}}, {{2}}, {{3}})',
        fields: '1:number1:number;2:number2:number:*;3:number3:number:*',
        example: 'SUM(-5, 15, 32, "Hello World!")',
        expectedResult: '42',
        description: 'FORMULA.SUM',
        descriptionOpt: 'FORMULA.SUM-OPT',
        returnType: 'number',
        isFavorite: true
    },
    {
        code: 'SUMIF',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMIF({{1}}, {{2}}, {{3}})',
        fields: '1:range:number::[];2:criteria:string;3:num_range:number:*',
        example: 'SUMIF([2,4,8,16], ">5")',
        expectedResult: '24',
        description: 'FORMULA.SUMIF',
        descriptionOpt: 'FORMULA.SUMIF-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMIFS',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMIFS({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:sum_range:number::[];2:range1:number::[];3:criteria1:string;4:range2:number:*:[];5:criteria2:string:*',
        example: 'SUMIFS([2,4,8,16], [1,2,3,4], ">=2", [1,2,4,8], "<=4")',
        expectedResult: '12',
        description: 'FORMULA.SUMIFS',
        descriptionOpt: 'FORMULA.SUMIFS-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMPRODUCT',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMPRODUCT({{1}}, {{2}})',
        fields: '1:array1:number::[];2:array2:number:*:[]',
        example: 'SUMPRODUCT([[1,2],[3,4]], [[1,0],[0,1]])',
        expectedResult: '5',
        description: 'FORMULA.SUMPRODUCT',
        descriptionOpt: 'FORMULA.SUMPRODUCT-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMSQ',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMSQ({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'SUMSQ(3, 4)',
        expectedResult: '25',
        description: 'FORMULA.SUMSQ',
        descriptionOpt: 'FORMULA.SUMSQ-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMX2MY2',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMX2MY2({{1}}, {{2}})',
        fields: '1:array_x:number::[];2:array_y:number::[]',
        example: 'SUMX2MY2([1,2], [3,4])',
        expectedResult: '-20',
        description: 'FORMULA.SUMX2MY2',
        descriptionOpt: 'FORMULA.SUMX2MY2-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMX2PY2',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMX2PY2({{1}}, {{2}})',
        fields: '1:array_x:number::[];2:array_y:number::[]',
        example: 'SUMX2PY2([1,2], [3,4])',
        expectedResult: '30',
        description: 'FORMULA.SUMX2PY2',
        descriptionOpt: 'FORMULA.SUMX2PY2-OPT',
        returnType: 'number'
    },
    {
        code: 'SUMXMY2',
        group: 'FORMULA.GROUP.MATH',
        formula: 'SUMXMY2({{1}}, {{2}})',
        fields: '1:array_x:number::[];2:array_y:number::[]',
        example: 'SUMXMY2([1,2], [3,4])',
        expectedResult: '8',
        description: 'FORMULA.SUMXMY2',
        descriptionOpt: 'FORMULA.SUMXMY2-OPT',
        returnType: 'number'
    },
    {
        code: 'TAN',
        group: 'FORMULA.GROUP.MATH',
        formula: 'TAN({{1}})',
        fields: '1:number:number',
        example: 'TAN(1)',
        expectedResult: '1.5574077246549023',
        description: 'FORMULA.TAN',
        descriptionOpt: 'FORMULA.TAN-OPT',
        returnType: 'number'
    },
    {
        code: 'TANH',
        group: 'FORMULA.GROUP.MATH',
        formula: 'TANH({{1}})',
        fields: '1:number:number',
        example: 'TANH(-2)',
        expectedResult: '-0.9640275800758168',
        description: 'FORMULA.TANH',
        descriptionOpt: 'FORMULA.TANH-OPT',
        returnType: 'number'
    },
    {
        code: 'TRUNC',
        group: 'FORMULA.GROUP.MATH',
        formula: 'TRUNC({{1}})',
        fields: '1:number:number;2:num_digits:number:*',
        example: 'TRUNC(-8.9)',
        expectedResult: '-8',
        description: 'FORMULA.TRUNC',
        descriptionOpt: 'FORMULA.TRUNC-OPT',
        returnType: 'number'
    },
    {
        code: 'AVEDEV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'AVEDEV({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'AVEDEV([2,4], [8,16])',
        expectedResult: '4.5',
        description: 'FORMULA.AVEDEV',
        descriptionOpt: 'FORMULA.AVEDEV-OPT',
        returnType: 'number'
    },
    {
        code: 'AVERAGE',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'AVERAGE({{1}}, {{2}})',
        fields: '1:number1:number;2:number2:number:*',
        example: 'AVERAGE([2,4], [8,16])',
        expectedResult: '7.5',
        description: 'FORMULA.AVERAGE',
        descriptionOpt: 'FORMULA.AVERAGE-OPT',
        returnType: 'number'
    },
    {
        code: 'AVERAGEA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'AVERAGEA({{1}}, {{2}})',
        fields: '1:value1:number;2:value2:number:*',
        example: 'AVERAGEA([2,4], [8,16])',
        expectedResult: '7.5',
        description: 'FORMULA.AVERAGEA',
        descriptionOpt: 'FORMULA.AVERAGEA-OPT',
        returnType: 'number'
    },
    {
        code: 'AVERAGEIF',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'AVERAGEIF({{1}}, {{2}}, {{3}})',
        fields: '1:range:number::[];2:criteria:string;3:average_range:number:*:[]',
        example: 'AVERAGEIF([2,4,8,16], ">5", [1, 2, 3, 4])',
        expectedResult: '3.5',
        description: 'FORMULA.AVERAGEIF',
        descriptionOpt: 'FORMULA.AVERAGEIF-OPT',
        returnType: 'number'
    },
    {
        code: 'AVERAGEIFS',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'AVERAGEIFS({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:avg_rng:number::[];2:range1:number::[];3:criteria1:string;4:range2:number:*:[];5:criteria2:string:*',
        example: 'AVERAGEIFS([2,4,8,16], [1,2,3,4], ">=2", [1,2,4,8], "<=4")',
        expectedResult: '6',
        description: 'FORMULA.AVERAGEIFS',
        descriptionOpt: 'FORMULA.AVERAGEIFS-OPT',
        returnType: 'number'
    },
    {
        code: 'BETADIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'BETADIST({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:value:number;2:alpha:number;3:beta:number;4:lower:number:*;5:upper:number:*',
        example: 'BETADIST(2, 8, 10, true, 1, 3)',
        expectedResult: '0.6854705810117458',
        description: 'FORMULA.BETADIST',
        descriptionOpt: 'FORMULA.BETADIST-OPT',
        returnType: 'number'
    },
    {
        code: 'BETAINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'BETAINV({{1}}, {{2}}, {{3}}, {{4}}, {{5}})',
        fields: '1:prov:number;2:alpha:number;3:beta:number;4:lower:number:*;5:upper:number:*',
        example: 'BETAINV(0.6854705810117458, 8, 10, 1, 3)',
        expectedResult: '1.9999999999999998',
        description: 'FORMULA.BETAINV',
        descriptionOpt: 'FORMULA.BETAINV-OPT',
        returnType: 'number'
    },
    {
        code: 'BINOMDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'BINOMDIST({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:number_s:number;2:trials:number;3:probability_s:number;4:cumulative:boolean',
        example: 'BINOMDIST(6, 10, 0.5, false)',
        expectedResult: '0.205078125',
        description: 'FORMULA.BINOMDIST',
        descriptionOpt: 'FORMULA.BINOMDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'CORREL',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'CORREL({{1}}, {{2}})',
        fields: '1:array1#number::[];2:array2#number::[]',
        example: 'CORREL([3,2,4,5,6], [9,7,12,15,17])',
        expectedResult: '0.9970544855015815',
        description: 'FORMULA.CORREL',
        descriptionOpt: 'FORMULA.CORREL-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNT',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNT({{1}}, {{2}})',
        fields: '1:value1:number::[];2:value2:number:*:[]',
        example: 'COUNT([1,2], [3,4])',
        expectedResult: '4',
        description: 'FORMULA.COUNT',
        descriptionOpt: 'FORMULA.COUNT-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNTA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNTA({{1}})',
        fields: '1:value1:any::[];2:value2:any:*:[]',
        example: 'COUNTA([1, null, 3, "a", "", "c"])',
        expectedResult: '4',
        description: 'FORMULA.COUNTA',
        descriptionOpt: 'FORMULA.COUNTA-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNTBLANK',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNTBLANK({{1}})',
        fields: '1:range:any::[]',
        example: 'COUNTBLANK([1, null, 3, "a", "", "c"])',
        expectedResult: '2',
        description: 'FORMULA.COUNTBLANK',
        descriptionOpt: 'FORMULA.COUNTBLANK-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNTIF',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNTIF({{1}}, {{2}})',
        fields: '1:range:string::[];2:criteria:string',
        example: 'COUNTIF(["Caen", "Melbourne", "Palo Alto", "Singapore"], "a")',
        expectedResult: '3',
        description: 'FORMULA.COUNTIF',
        descriptionOpt: 'FORMULA.COUNTIF-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNTIFS',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNTIFS({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:range1:any::[];criteria1:any;3:range2:any:*:[];4:criteria2:any:*',
        example: 'COUNTIFS([2,4,8,16], ">=2", [1,2,4,8], "<=4")',
        expectedResult: '2',
        description: 'FORMULA.COUNTIFS',
        descriptionOpt: 'FORMULA.COUNTIFS-OPT',
        returnType: 'number'
    },
    {
        code: 'COUNTUNIQUE',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COUNTUNIQUE({{1}})',
        fields: '1:range:any::[]',
        example: 'COUNTUNIQUE([1,1,2,2,3,3])',
        expectedResult: '3',
        description: 'FORMULA.COUNTUNIQUE',
        descriptionOpt: 'FORMULA.COUNTUNIQUE-OPT',
        returnType: 'number'
    },
    {
        code: 'COVARIANCEP',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COVARIANCEP({{1}}, {{2}})',
        fields: '1:matrix1:number::[];2:matrix2:number::[]',
        example: 'COVARIANCEP([3,2,4,5,6], [9,7,12,15,17])',
        expectedResult: '5.2',
        description: 'FORMULA.COVARIANCEP',
        descriptionOpt: 'FORMULA.COVARIANCEP-OPT',
        returnType: 'number'
    },
    {
        code: 'COVARIANCES',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'COVARIANCES({{1}}, {{2}})',
        fields: '1:matrix1:number::[];2:matrix2:number::[]',
        example: 'COVARIANCES([2,4,8], [5,11,12])',
        expectedResult: '9.666666666666668',
        description: 'FORMULA.COVARIANCES',
        descriptionOpt: 'FORMULA.COVARIANCES-OPT',
        returnType: 'number'
    },
    {
        code: 'DEVSQ',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'DEVSQ({{1}})',
        fields: '1:numbers:number::[]',
        example: 'DEVSQ([2,4,8,16])',
        expectedResult: '115',
        description: 'FORMULA.DEVSQ',
        descriptionOpt: 'FORMULA.DEVSQ-OPT',
        returnType: 'number'
    },
    {
        code: 'EXPONDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'EXPONDIST({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:lambda:number;3:cumulative:boolean',
        example: 'EXPONDIST(0.2, 10, true)',
        expectedResult: '0.8646647167633873',
        description: 'FORMULA.EXPONDIST',
        descriptionOpt: 'FORMULA.EXPONDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'FDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FDIST({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:deg_freedom1:number;3:deg_freedom2:number',
        example: 'FDIST(15.2069, 6, 4)',
        expectedResult: '0.0012237917087831735',
        description: 'FORMULA.FDIST',
        descriptionOpt: 'FORMULA.FDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'FINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FINV({{1}}, {{2}}, {{3}})',
        fields: '1:probability:number;2:deg_freedom1:number;3:deg_freedom2:number',
        example: 'FINV(0.01, 6, 4)',
        expectedResult: '0.10930991412457851',
        description: 'FORMULA.FINV',
        descriptionOpt: 'FORMULA.FINV-OPT',
        returnType: 'number'
    },
    {
        code: 'FISHER',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FISHER({{1}})',
        fields: '1:x:number',
        example: 'FISHER(0.75)',
        expectedResult: '0.9729550745276566',
        description: 'FORMULA.FISHER',
        descriptionOpt: 'FORMULA.FISHER-OPT',
        returnType: 'number'
    },
    {
        code: 'FISHERINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FISHERINV({{1}})',
        fields: '1:y:number',
        example: 'FISHERINV(0.9729550745276566)',
        expectedResult: '0.75',
        description: 'FORMULA.FISHERINV',
        descriptionOpt: 'FORMULA.FISHERINV-OPT',
        returnType: 'number'
    },
    {
        code: 'FORECAST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FORECAST({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:known_ys:number::[];3:kown_xs:number::[]',
        example: 'FORECAST(30, [6,7,9,15,21], [20,28,31,38,40])',
        expectedResult: '10.607253086419755',
        description: 'FORMULA.FORECAST',
        descriptionOpt: 'FORMULA.FORECAST-OPT',
        returnType: 'number'
    },
    {
        code: 'FREQUENCY',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'FREQUENCY({{1}}, {{2}})',
        fields: '1:data_array:number::[];2:bins_array:number::[]',
        example: 'FREQUENCY([79,85,78,85,50,81,95,88,97], [70,79,89])',
        expectedResult: '1,2,4,2',
        description: 'FORMULA.FREQUENCY',
        descriptionOpt: 'FORMULA.FREQUENCY-OPT',
        returnType: 'number',
    },
    {
        code: 'GAMMA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'GAMMA({{1}})',
        fields: '1:number:number',
        example: 'GAMMA(2.5)',
        expectedResult: '1.3293403919101043',
        description: 'FORMULA.GAMMA',
        descriptionOpt: 'FORMULA.GAMMA-OPT',
        returnType: 'number'
    },
    {
        code: 'GAMMALN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'GAMMALN({{1}})',
        fields: '1:number:number',
        example: 'GAMMALN(10)',
        expectedResult: '12.801827480081961',
        description: 'FORMULA.GAMMALN',
        descriptionOpt: 'FORMULA.GAMMALN-OPT',
        returnType: 'number'
    },
    {
        code: 'GAUSS',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'GAUSS({{1}})',
        fields: '1:number:number',
        example: 'GAUSS(2)',
        expectedResult: '0.4772498680518208',
        description: 'FORMULA.GAUSS',
        descriptionOpt: 'FORMULA.GAUSS-OPT',
        returnType: 'number'
    },
    {
        code: 'GEOMEAN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'GEOMEAN({{1}}, {{2}})',
        fields: '1:number1:number;2:number:*',
        example: 'GEOMEAN([2,4], [8,16])',
        expectedResult: '5.656854249492381',
        description: 'FORMULA.GEOMEAN',
        descriptionOpt: 'FORMULA.GEOMEAN-OPT',
        returnType: 'number'
    },
    {
        code: 'GROWTH',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'GROWTH({{1}}, {{2}}, {{3}}, , {{4}})',
        fields: '1:Known_y:number::[];2:Known_x:number:*:[];3:New_x:number:*:[];4:Const:number:*',
        example: 'GROWTH([2,4,8,16], [1,2,3,4], [5])',
        expectedResult: '32.00000000000003',
        description: 'FORMULA.GROWTH',
        descriptionOpt: 'FORMULA.GROWTH-OPT',
        returnType: 'number'
    },
    {
        code: 'HARMEAN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'HARMEAN({{1}}, {{2}})',
        fields: '1:Number1:number::[];2:Number2:number:*:[]',
        example: 'HARMEAN([2,4], [8,16])',
        expectedResult: '4.266666666666667',
        description: 'FORMULA.HARMEAN',
        descriptionOpt: 'FORMULA.HARMEAN-OPT',
        returnType: 'number'
    },
    {
        code: 'HYPGEOMDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'HYPGEOMDIST({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:Sample_s:number;2:Number_sample:number;3:Population_s:number;4:Number_pop:number',
        example: 'HYPGEOMDIST(1, 4, 8, 20)',
        expectedResult: '0.3632610939112487',
        description: 'FORMULA.HYPGEOMDIST',
        descriptionOpt: 'FORMULA.HYPGEOMDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'INTERCEPT',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'INTERCEPT({{1}}, {{2}})',
        fields: '1:known_ys:number::[];2:known_xs:number::[]',
        example: 'INTERCEPT([2,3,9,1,8], [6,5,11,7,5])',
        expectedResult: '0.04838709677419217',
        description: 'FORMULA.INTERCEPT',
        descriptionOpt: 'FORMULA.INTERCEPT-OPT',
        returnType: 'number'
    },
    {
        code: 'KURT',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'KURT({{1}}, {{2}})',
        fields: '1:Number1:number::[];2:Number2:number:*:[]',
        example: 'KURT([3,4,5,2,3,4,5,6,4,7])',
        expectedResult: '-0.15179963720841627',
        description: 'FORMULA.KURT',
        descriptionOpt: 'FORMULA.KURT-OPT',
        returnType: 'number'
    },
    {
        code: 'LARGE',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'LARGE({{1}}, {{2}})',
        fields: '1:array:number::[];2:k:number',
        example: 'LARGE([3,5,3,5,4,4,2,4,6,7], 3)',
        expectedResult: '5',
        description: 'FORMULA.LARGE',
        descriptionOpt: 'FORMULA.LARGE-OPT',
        returnType: 'number'
    },
    {
        code: 'LINEST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'LINEST({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:known_ys:number::[];2:known_xs:number:*:[];3:const:boolean:*;4:stats:boolean:*',
        example: 'LINEST([1,9,5,7], [0,4,2,3], true, true)',
        expectedResult: '2.1',
        description: 'FORMULA.LINEST',
        descriptionOpt: 'FORMULA.LINEST-OPT',
        returnType: 'number'
    },
    {
        code: 'LOGNORMDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'LOGNORMDIST({{1}}, {{2}}, {{3}})',
        fields: '1:X:number;2:Mean:number;3:Standard_dev:number',
        example: 'LOGNORMDIST(4, 3.5, 1.2)',
        expectedResult: '0.0390835557068005',
        description: 'FORMULA.LOGNORMDIST',
        descriptionOpt: 'FORMULA.LOGNORMDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'LOGNORMINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'LOGNORMINV({{1}}, {{2}}, {{3}})',
        fields: '1:X:number;2:Mean:number;3:Standard_dev:number',
        example: 'LOGNORMINV(0.0390835557068005, 3.5, 1.2)',
        expectedResult: '4.000000000000001',
        description: 'FORMULA.LOGNORMINV',
        descriptionOpt: 'FORMULA.LOGNORMINV-OPT',
        returnType: 'number'
    },
    {
        code: 'MAX',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MAX({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MAX([0.1,0.2], [0.4,0.8]])',
        expectedResult: '0.8',
        description: 'FORMULA.MAX',
        descriptionOpt: 'FORMULA.MAX-OPT',
        returnType: 'number'
    },
    {
        code: 'MAXA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MAXA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MAXA([0.1,0.2], [0.4,0.8]])',
        expectedResult: '1',
        description: 'FORMULA.MAXA',
        descriptionOpt: 'FORMULA.MAXA-OPT',
        returnType: 'number'
    },
    {
        code: 'MEDIAN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MEDIAN({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MEDIAN([1,2,3], [4,5,6])',
        expectedResult: '3.5',
        description: 'FORMULA.MEDIAN',
        descriptionOpt: 'FORMULA.MEDIAN-OPT',
        returnType: 'number'
    },
    {
        code: 'MIN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MIN({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MIN([0.1,0.2], [0.4,0.8])',
        expectedResult: '0.1',
        description: 'FORMULA.MIN',
        descriptionOpt: 'FORMULA.MIN-OPT',
        returnType: 'number'
    },
    {
        code: 'MINA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MINA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MINA([0.1,0.2], [0.4,0.8])',
        expectedResult: '0',
        description: 'FORMULA.MINA',
        descriptionOpt: 'FORMULA.MINA-OPT',
        returnType: 'number'
    },
    {
        code: 'MODEMULT',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MODEMULT({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MODEMULT([1,2,3,4,3,2,1,2,3])',
        expectedResult: '2.3',
        description: 'FORMULA.MODEMULT',
        descriptionOpt: 'FORMULA.MODEMULT-OPT',
        returnType: 'number'
    },
    {
        code: 'MODESNGL',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'MODESNGL({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'MODESNGL([1,2,3,4,3,2,1,2,3])',
        expectedResult: '2',
        description: 'FORMULA.MODESNGL',
        descriptionOpt: 'FORMULA.MODESNGL-OPT',
        returnType: 'number'
    },
    {
        code: 'NORMDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'NORMDIST({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:x:number;2:mean:number;3:standard_dev:number;4:cumulative:boolean',
        example: 'NORMDIST(42, 40, 1.5, true)',
        expectedResult: '0.9087887802741321',
        description: 'FORMULA.NORMDIST',
        descriptionOpt: 'FORMULA.NORMDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'NORMINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'NORMINV({{1}}, {{2}}, {{3}})',
        fields: '1:probability:number;2:mean:number;3:standard_dev:number',
        example: 'NORMINV(0.9087887802741321, 40, 1.5)',
        expectedResult: '42',
        description: 'FORMULA.NORMINV',
        descriptionOpt: 'FORMULA.NORMINV-OPT',
        returnType: 'number'
    },
    {
        code: 'NORMSDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'NORMSDIST({{1}}, {{2}})',
        fields: '1:z:number;2:cumulative:boolean',
        example: 'NORMSDIST(1, true)',
        expectedResult: '0.8413447460685429',
        description: 'FORMULA.NORMSDIST',
        descriptionOpt: 'FORMULA.NORMSDIST',
        returnType: 'number'
    },
    {
        code: 'NORMSINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'NORMSINV({{1}})',
        fields: '1:probability:number',
        example: 'NORMSINV(0.8413447460685429)',
        expectedResult: '1.0000000000000002',
        description: 'FORMULA.NORMSINV',
        descriptionOpt: 'FORMULA.NORMSINV-OPT',
        returnType: 'number'
    },
    {
        code: 'PEARSON',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PEARSON({{1}}, {{2}})',
        fields: '1:array1number::[];2:array2:number::[]',
        example: 'PEARSON([9,7,5,3,1], [10,6,1,5,3])',
        expectedResult: '0.6993786061802354',
        description: 'FORMULA.PEARSON',
        descriptionOpt: 'FORMULA.PEARSON-OPT',
        returnType: 'number',
    },
    {
        code: 'PERCENTILEEXC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERCENTILEEXC({{1}}, {{2}})',
        fields: '1:array:number::[];2:k:number',
        example: 'PERCENTILEEXC([1,2,3,4], 0.3)',
        expectedResult: '1.5',
        description: 'FORMULA.PERCENTILEEXC',
        descriptionOpt: 'FORMULA.PERCENTILEEXC-OPT',
        returnType: 'number'
    },
    {
        code: 'PERCENTILEINC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERCENTILEINC({{1}}, {{2}})',
        fields: '1:array:number::[];2:k:number',
        example: 'PERCENTILEINC([1,2,3,4], 0.3)',
        expectedResult: '1.9',
        description: 'FORMULA.PERCENTILEINC',
        descriptionOpt:'FORMULA.PERCENTILEINC-OPT',
        returnType: 'number'
    },
    {
        code: 'PERCENTRANKEXC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERCENTRANKEXC({{1}}, {{2}}, {{3}})',
        fields: '1:array:number::[];2:x:number;3:significance:number:*',
        example: 'PERCENTRANKEXC([1,2,3,4], 2, 2)',
        expectedResult: '0.4',
        description: 'FORMULA.PERCENTRANKEXC',
        descriptionOpt: 'FORMULA.PERCENTRANKEXC-OPT',
        returnType: 'number'
    },
    {
        code: 'PERCENTRANKINC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERCENTRANKINC({{1}}, {{2}}, {{3}})',
        fields: '1:array:number::[];2:x:number;3:significance:number:*',
        example: 'PERCENTRANKINC([1,2,3,4], 2, 2)',
        expectedResult: '0.33',
        description: 'FORMULA.PERCENTRANKINC',
        descriptionOpt: 'FORMULA.PERCENTRANKINC-OPT',
        returnType: 'number'
    },
    {
        code: 'PERMUT',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERMUT({{1}}, {{2}})',
        fields: '1:number:number;2:number_chosen:number',
        example: 'PERMUT(100, 3)',
        expectedResult: '970200',
        description: 'FORMULA.PERMUT',
        descriptionOpt: 'FORMULA.PERMUT-OPT',
        returnType: 'number'
    },
    {
        code: 'PERMUTATIONA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PERMUTATIONA({{1}}, {{2}})',
        fields: '1:number:number;2:number_chosen:number',
        example: 'PERMUTATIONA(4, 3)',
        expectedResult: '64',
        description: 'FORMULA.PERMUTATIONA',
        descriptionOpt: 'FORMULA.PERMUTATIONA-OPT',
        returnType: 'number'
    },
    {
        code: 'PHI',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PHI({{1}})',
        fields: '1:x:number',
        example: 'PHI(0.75)',
        expectedResult: '0.30113743215480443',
        description: 'FORMULA.PHI',
        descriptionOpt: 'FORMULA.PHI-OPT',
        returnType: 'number'
    },
    {
        code: 'POISSONDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'POISSONDIST({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:mean:number;3:cumulative:boolean',
        example: 'POISSONDIST(2, 5, true)',
        expectedResult: '0.12465201948308113',
        description: 'FORMULA.POISSONDIST',
        descriptionOpt: 'FORMULA.POISSONDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'PROB',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'PROB({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:x_range:number::[];2:prob_range:number::[];3:lower_limit:number:*;4:upper_limit:number:*',
        example: 'PROB([1,2,3,4], [0.1,0.2,0.2,0.1], 2, 3)',
        expectedResult: '0.4',
        description: 'FORMULA.PROB',
        descriptionOpt: 'FORMULA.PROB-OPT',
        returnType: 'number'
    },
    {
        code: 'QUARTILEEXC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'QUARTILEEXC({{1}}, {{2}})',
        fields: '1:array:number::[];2:quart:number',
        example: 'QUARTILEEXC([1,2,3,4], 1)',
        expectedResult: '1.25',
        description: 'FORMULA.QUARTILEEXC',
        descriptionOpt: 'FORMULA.QUARTILEEXC-OPT',
        returnType: 'number'
    },
    {
        code: 'QUARTILEINC',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'QUARTILEINC({{1}}, {{2}})',
        fields: '1:array:number::[];2:quart:number',
        example: 'QUARTILEINC([1,2,3,4], 1)',
        expectedResult: '1.75',
        description: 'FORMULA.QUARTILEINC',
        descriptionOpt: 'FORMULA.QUARTILEINC-OPT',
        returnType: 'number'
    },
    {
        code: 'RANKAVG',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'RANKAVG({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:ref:number::[];3:order:boolean:*',
        example: 'RANKAVG(4, [2,4,4,8,8,16], false)',
        expectedResult: '4.5',
        description: 'FORMULA.RANKAVG',
        descriptionOpt: 'FORMULA.RANKAVG-OPT',
        returnType: 'number'
    },
    {
        code: 'RANKEQ',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'RANKEQ({{1}}, {{2}}, {{3}})',
        fields: '1:number:number;2:ref:number::[];3:order:boolean:*',
        example: 'RANKEQ(4, [2,4,4,8,8,16], false)',
        expectedResult: '4',
        description: 'FORMULA.RANKEQ',
        descriptionOpt: 'FORMULA.RANKEQ-OPT',
        returnType: 'number'
    },
    {
        code: 'RSQ',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'RSQ({{1}}, {{2}})',
        fields: '1:know_ys:number::[];2:know_xs:number::[]',
        example: 'RSQ([9,7,5,3,1], [10,6,1,5,3])',
        expectedResult: '0.4891304347826088',
        description: 'FORMULA.RSQ',
        descriptionOpt: 'FORMULA.RSQ-OPT',
        returnType: 'number'
    },
    {
        code: 'SKEW',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'SKEW({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'SKEW([3,4,5,2,3,4,5,6,4,7])',
        expectedResult: '0.3595430714067974',
        description: 'FORMULA.SKEW',
        descriptionOpt: 'FORMULA.SKEW-OPT',
        returnType: 'number'
    },
    {
        code: 'SKEWP',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'SKEWP({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'SKEWP([3,4,5,2,3,4,5,6,4,7])',
        expectedResult: '0.303193339354144',
        description: 'FORMULA.SKEWP',
        descriptionOpt: 'FORMULA.SKEWP-OPT',
        returnType: 'number'
    },
    {
        code: 'SLOPE',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'SLOPE({{1}}, {{2}})',
        fields: '1:know_ys:number::[];2:know_xs:number::[]',
        example: 'SLOPE([1,9,5,7], [0,4,2,3])',
        expectedResult: '2',
        description: 'FORMULA.SLOPE',
        descriptionOpt: 'FORMULA.SLOPE-OPT',
        returnType: 'number'
    },
    {
        code: 'SMALL',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'SMALL({{1}}, {{2}})',
        fields: '1:array:number::[];2:k:number',
        example: 'SMALL([3,5,3,5,4,4,2,4,6,7], 3)',
        expectedResult: '3',
        description: 'FORMULA.SMALL',
        descriptionOpt: 'FORMULA.SMALL-OPT',
        returnType: 'number'
    },
    {
        code: 'STANDARDIZE',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STANDARDIZE({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:mean:number;3:standard_dev:number',
        example: 'STANDARDIZE(42, 40, 1.5)',
        expectedResult: '1.3333333333333333',
        description: 'FORMULA.STANDARDIZE',
        descriptionOpt: 'FORMULA.STANDARDIZE-OPT',
        returnType: 'number'
    },
    {
        code: 'STDEVA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STDEVA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'STDEVA([2,4], [8,16])',
        expectedResult: '6.013872850889572',
        description: 'FORMULA.STDEVA',
        descriptionOpt: 'FORMULA.STDEVA-OPT',
        returnType: 'number'
    },
    {
        code: 'STDEVP',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STDEVP({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'STDEVP([2,4], [8,16])',
        expectedResult: '5.361902647381804',
        description: 'FORMULA.STDEVP',
        descriptionOpt: 'FORMULA.STDEVP-OPT',
        returnType: 'number'
    },
    {
        code: 'STDEVPA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STDEVPA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'STDEVPA([2,4], [8,16])',
        expectedResult: '5.489889697333535',
        description: 'FORMULA.STDEVPA',
        descriptionOpt: 'FORMULA.STDEVPA-OPT',
        returnType: 'number'
    },
    {
        code: 'STDEVS',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STDEVS({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'STDEVS([2,4], [8,16])',
        expectedResult: '6.191391873668904',
        description: 'FORMULA.STDEVS',
        descriptionOpt: 'FORMULA.STDEVS-OPT',
        returnType: 'number'
    },
    {
        code: 'STEYX',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'STEYX({{1}}, {{2}})',
        fields: '1:know_ys:number::[];2:know_xs:number::[]',
        example: 'STEYX([2,3,9,1,8,7,5], [6,5,11,7,5,4,4])',
        expectedResult: '3.305718950210041',
        description: 'FORMULA.STEYX',
        descriptionOpt: 'FORMULA.STEYX-OPT',
        returnType: 'number'
    },
    {
        code: 'TDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'TDIST({{1}}, {{2}}, {{3}})',
        fields: '1:x:number;2:deg_freedom:number;3:tails:number',
        example: 'TDIST(60, 1, 2)',
        expectedResult: '0.9946953263673741',
        description: 'FORMULA.TDIST',
        descriptionOpt: 'FORMULA.TDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'TINV',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'TINV({{1}}, {{2}})',
        fields: '1:probability:number;2:deg_freedom:number',
        example: 'TINV(0.9946953263673741, 1)',
        expectedResult: '59.99999999996535',
        description: 'FORMULA.TINV',
        descriptionOpt: 'FORMULA.TINV-OPT',
        returnType: 'number'
    },
    {
        code: 'TRIMMEAN',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'TRIMMEAN({{1}}, {{2}})',
        fields: '1:array:number::[];2:percent:number',
        example: 'TRIMMEAN([4,5,6,7,2,3,4,5,1,2,3], 0.2)',
        expectedResult: '3.7777777777777777',
        description: 'FORMULA.TRIMMEAN',
        descriptionOpt: 'FORMULA.TRIMMEAN-OPT',
        returnType: 'number',
    },
    {
        code: 'VARA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'VARA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'VARA([2,4], [8,16])',
        expectedResult: '36.16666666666667',
        description: 'FORMULA.VARA',
        descriptionOpt: 'FORMULA.VARA-OPT',
        returnType: 'number'
    },
    {
        code: 'VARP',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'VARP({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'VARP([2,4], [8,16])',
        expectedResult: '28.75',
        description: 'FORMULA.VARP',
        descriptionOpt: 'FORMULA.VARP-OPT',
        returnType: 'number'
    },
    {
        code: 'VARPA',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'VARPA({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'VARPA([2,4], [8,16])',
        expectedResult: '30.13888888888889',
        description: 'FORMULA.VARPA',
        descriptionOpt: 'FORMULA.VARPA-OPT',
        returnType: 'number'
    },
    {
        code: 'VARS',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'VARS({{1}}, {{2}})',
        fields: '1:number1:number::[];2:number2:number:*:[]',
        example: 'VARS([2,4], [8,16])',
        expectedResult: '38.333333333333336',
        description: 'FORMULA.VARS',
        descriptionOpt: 'FORMULA.VARS-OPT',
        returnType: 'number'
    },
    {
        code: 'WEIBULLDIST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'WEIBULLDIST({{1}}, {{2}}, {{3}}, {{4}})',
        fields: '1:x:number;2:alpha:number;3:beta:number;4:cumulative:boolean',
        example: 'WEIBULLDIST(105, 20, 100, true)',
        expectedResult: '0.9295813900692769',
        description: 'FORMULA.WEIBULLDIST',
        descriptionOpt: 'FORMULA.WEIBULLDIST-OPT',
        returnType: 'number'
    },
    {
        code: 'ZTEST',
        group: 'FORMULA.GROUP.STATISTICAL',
        formula: 'ZTEST({{1}}, {{2}})',
        fields: '1:array:number::[];2:x:number',
        example: 'ZTEST([3,6,7,8,6,5,4,2,1,9], 4)',
        expectedResult: '0.09057419685136381',
        description: 'FORMULA.ZTEST',
        descriptionOpt: 'FORMULA.ZTEST-OPT',
        returnType: 'number'
    },
];
