image: docker:latest
##
stages:
  - unit-tests
  - build
  - integration
  - image-ce-deploy
  - audit

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "OpenSource"
    - if: $CI_COMMIT_TAG

angular-tests:
  stage: unit-tests
  image: ${ALGOTECH_REGISTRY_HOST}/algo-node:18.13.0-alpine
  before_script:
    - apk add --no-cache chromium
    - export CHROME_BIN=/usr/bin/chromium-browser
  script:
    - npm install --silent --legacy-peer-deps # could be shared among jobs, as cache or artifacts instead of reinstalling every time
    - npm run test:cov -- --no-watch --no-progress
  artifacts:
    when: always
    reports:
      junit: test-reports/karma/junit.xml
      cobertura: coverage/cobertura-coverage.xml
    paths:
      - coverage/lcov.info
  only:
    - OpenSource

angular-build:
  stage: build
  image: ${ALGOTECH_REGISTRY_HOST}/algo-node:18.13.0-alpine
  before_script:
    - apk add --no-cache git bash npm docker chromium
    - export CHROME_BIN=/usr/bin/chromium-browser
    - docker login -u "${ALGOTECH_REGISTRY_USER}" -p "${ALGOTECH_REGISTRY_PASS}" https://registry.myalgotech.io
  script:
    - export DATE=$(date +%Y.%-m.%-d)
    - npm --no-git-tag-version version ${DATE}
    - export VERSION=$(cat package.json | grep version | awk '{printf($2)}' | cut -d'"' -f2)
    - echo "Version=${VERSION}"
    - npm install --legacy-peer-deps
    - npm run build:prod
    - docker build --no-cache -f Dockerfile -t ${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce .
    - docker tag ${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce
    - docker push ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce
    - docker image rm ${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce
  needs:
    - job: angular-tests
  only:
    - OpenSource

tag-to-registry:
  stage: integration
  before_script:
    - docker login -u "${ALGOTECH_REGISTRY_USER}" -p "${ALGOTECH_REGISTRY_PASS}" https://${ALGOTECH_REGISTRY_HOST}
  script:
    - docker tag ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:latest-ce
    - docker push ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:latest-ce
    - docker image rm ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-ce
  needs:
    - job: angular-build
  only:
    - OpenSource

dockerhub-image-deploy:
  stage: image-ce-deploy
  before_script:
    - apk add --no-cache git bash
    - docker login -u "${ALGOTECH_REGISTRY_USER}" -p "${ALGOTECH_REGISTRY_PASS}" https://${ALGOTECH_REGISTRY_HOST}
    - docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}"
  script:
    - TAG=${CI_COMMIT_TAG}
    - docker tag ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:latest-ce ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:$TAG
    - docker push ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:$TAG
    - docker tag ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:latest-ce algotechinfo/${CI_PROJECT_NAME}:$TAG
    - docker tag ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:latest-ce algotechinfo/${CI_PROJECT_NAME}:latest
    - docker push algotechinfo/${CI_PROJECT_NAME}:$TAG
    - docker push algotechinfo/${CI_PROJECT_NAME}:latest
  only:
    - tags

####################
# AUDIT CODE

owasp snapshot report:
  stage: audit
  image: 
    name: ${ALGOTECH_REGISTRY_HOST}/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "${ALGOTECH_REGISTRY_USER}"
    TRIVY_PASSWORD: "${ALGOTECH_REGISTRY_PASS}"
    TRIVY_AUTH_URL: "https://${ALGOTECH_REGISTRY_HOST}"
    FULL_IMAGE_NAME: ${ALGOTECH_REGISTRY_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}
  when: manual
  script:
    - trivy --version
    - echo "Analyzing image $FULL_IMAGE_NAME"
    # Builds report 
    - trivy image --exit-code 0 --no-progress "$FULL_IMAGE_NAME" > trivy-report.md
    # Prints full report
    - trivy image --exit-code 0 --no-progress --severity HIGH "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - trivy image --exit-code 1 --no-progress --severity CRITICAL  "$FULL_IMAGE_NAME"
  artifacts:
    when: always
    paths:
      - "${CI_PROJECT_DIR}/trivy-report.md"
